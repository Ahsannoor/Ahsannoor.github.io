{"version":3,"sources":["components/Drawer/Drawer.js","components/Layout/index.js","pages/Dashboard/index.js","components/orderTransfer/orderCutTable.js","components/orderTransfer/orderTransferListItem/orderTransferItem.js","pages/OrderTransfer/index.js","components/UpdateBundleQuantity/BundleQuantityTable.js","pages/CutReport/UpdateQuantity/UpdateQuantity.js","pages/DeleteScannings/datatable.js","pages/DeleteScannings/DeleteScannings.js","components/RateAdjustment/RateAdjustmentTable.js","pages/StyleBulletin/RateAdjustment/RateAdjustment.js","components/StatusDialog/styleBulletinStatusDialog.js","components/AssignOperationsTable/AssignOperationTable.js","pages/StyleBulletin/UploadStyleBulletin/UploadStyleBulletin.js","components/StatusDialog/statusDialog.js","pages/CutReport/Upload Cutreport/UploadCutReport.js","pages/Machine/Machine.js","pages/Operation/Operation.js","components/StatusDialog/operationStatusDialog.js","pages/Operation/Add Operations/AddOperations.js","components/StatusDialog/machineStatusDialog.js","pages/Machine/Add Machines/AddMachineForm.js","pages/Worker/Worker.js","components/StatusDialog/workerStatusDialog.js","pages/Worker/Add Workers/AddWorkers.js","pages/CutBundleCreation/CutBundleCreation.js","components/UserAccounts/Add.js","components/TransferScannings/datatable.js","components/TransferScannings/index.js","pages/Home/index.js","util/Constants.js","util/config.js","assets/images/machines.jpg","assets/images/usaparel_white.png","assets/images/WiMetrix4.png"],"names":["useStyles","makeStyles","theme","root","display","drawer","width","drawerWidth","flexShrink","drawerPaper","color","backgroundImage","MachineImage","toolbar","mixins","content","flexGrow","backgroundColor","palette","background","default","padding","spacing","withRouter","props","classes","React","useState","cutReportMenuOpen","setcutReportMenuOpen","StyleBulletinMenuOpen","setStyleBulletinMenuOpen","operationsMenuOpen","setoperationsMenuOpen","machinesMenuOpen","setmachinesMenuOpen","workerMenuOpen","setworkerMenuOpen","Drawer","className","variant","paper","anchor","style","height","textAlign","src","require","List","selected","margin","borderRadius","ListItem","button","key","onClick","setSelected","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","component","disablePadding","nested","alt","appBar","marginLeft","loading","setLoading","userInfo","JSON","parse","localStorage","getItem","CssBaseline","AppBar","position","Toolbar","justifyContent","Typography","noWrap","unitCode","setTimeout","clear","history","push","CircularProgress","size","children","Dashboard","field","columnPaper","gridTemplateColumns","flexDirection","alignItems","desc","a","b","orderBy","EnhancedTableHead","onSelectAllClick","order","numSelected","rowCount","onRequestSort","headCells","TableHead","TableRow","TableCell","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","id","align","numeric","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","type","secondary","main","lighten","light","text","dark","title","flex","EnhancedTableToolbar","totalSum","clsx","marginBottom","table","minWidth","fontSize","fonfontSize","border","clip","overflow","top","EnhancedTable","console","log","setOrder","setOrderBy","page","setPage","dense","rowsPerPage","setRowsPerPage","columns","data","setData","count","total_amount","row","selection","parseFloat","amount","Math","round","emptyRows","min","length","setAmountFunction","Paper","TableContainer","Table","aria-labelledby","aria-label","target","newSelecteds","n","cut","temp_data","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","isItemSelected","indexOf","labelId","hover","name","selectedIndex","newSelected","concat","handleClick","role","aria-checked","tabIndex","scope","bundle","colSpan","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","makeAnimated","total_order_amount_for_partial","OrderTransferItem","status","setstatus","setValue","toggleText","setToggleText","collapse","setCollapse","orderAmount","setOrderAmount","rows","setRows","useEffect","selectedOrders","selectedOrder","cuts","AllProgressCompleteData","orderID","Order","selection_flag","selected_order","selected_cuts","CutID","TotalBundlesInCut","CutwiseAmount","item","Grid","container","lg","md","sm","xs","marginTop","FormControl","RadioGroup","selected_cuts_count","defaultValue","FormControlLabel","control","Radio","Button","endIcon","totalAmount","setSelection","animatedComponents","greenAvatar","marginRight","green","maxHeight","headers","orders","all_progress_complete_data","OrderTransfer","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","selectedOptions","setSelectedOrders","finalData","setFinalData","Loading","NotificationManager","info","fetch","serverIP","unitID","then","response","ok","json","Error","Error_No","Orders","colResult","filter","error","Error_Description","ex","catch","transfer","orders_excel_data","orders_data","order_amount","async","x","cut_count","cut_uploaded_count","y","method","body","stringify","Cuts","month","monthNames","Date","getMonth","unit_id","temp","setPayRollMonth","spinner","styles","isMulti","includes","options","isSearchable","components","helperText","asyncOnClick","done","total_amount_for_pay_roll","total_amount_info","generateExcel","filename","Fab","disableElevation","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","subheader","MaterialTableDemo","state","Rows","editable","onRowUpdate","newData","oldData","Promise","resolve","UpdateQuantityFunction","itemID","quantity","selected_cut","quantitySum","UpdateQuantity","orderQuantity","setOrderQuantity","totalCuts","setTotalCuts","forViewgetOrdersFromCutReport","forViewgetCutsForOrder","cutID","bundles","forViewgetBundlesForOrderCut","Bundles","special_process","createData","bundleID","reduce","sum","current","get_bundles_for_cut_order","isClearable","updateBundle","success","Datatable","filterType","onRowsDelete","rowsDeleted","rowsToBeDeleted","dataIndex","bundle_scan_id","setSelectedRowsForDeletion","handleDeleteScanningsButtonClick","search","downloadCsv","print","viewColumns","filterTable","operations","scannings_data","selected_operations","DeleteScannings","selectedRowsForDeletion","deleteScanningRequest","operation","toString","Operations","operationID","selected_count","Scannings","scan","Scanning_time","operationAutoID","operationDescription","workerID","workerName","machineID","machineType","styleID","lineID","lineDescription","sectionID","sectionDescription","Bundle_scan_id","UpdatePieceRate","pieceRate","SMV","onRowDelete","DeleteOperation","pieceRateSum","SMVSum","RateAdjustment","style_bulletin","Style_bulletin","Major_operation_description","operationSequence","SL","Operation_code","get_style_bulletin_for_order","toPrecision","smv","withStyles","closeButton","right","grey","onClose","other","disableTypography","IconButton","MuiDialogContent","MuiDialogActions","CustomizedDialogs","handleClose","setDialogOpen","fullWidth","dividers","Piece_Rate","SimpleTable","totalSMV","setTotalSMV","totalPieceRate","setTotalPieceRate","setOperations","toFixed","OC","OP","OP_NAME","SECTION_ID","SECTION_NAME","OP_SEQ","e","majorOperation","handleOperationChange","UploadStyleBulletin","responseDialogOpen","setresponseDialogOpen","uploadedDataResponse","setuploadedDataResponse","getOrdersForStyleBulletinFromOracle","UsUnitID","getAllOperations","operationCode","get_operations","get_orders","getStyleBulletin","OP_NO","OPERATION_NAME","RATE","temp_rows","majorOperationID","majorOperationName","uploadStyleBulletin","Responses","upload_style_bulletin","UploadCutReport","getOrdersFromOracle","orderQty","unitSellingPrice","loopOrder","handleOrderDropDownChange","cut_report","getCutReportFromOracleForOrder","Cut_Report","get_cut_report_for_order","Autocomplete","getOptionLabel","option","renderInput","params","TextField","uploadCutReport","orderInfo","upload_cut_report","Machines","getAllMachines","get_all_machines","updateMachineInfo","macID","headNo","Operation","get_all_operations","updateOperationInfo","AddOperationPage","setState","units","setUnits","sections","setSections","getAllUnits","UNITS","getAllSections","SECTIONS","unit_name","v","unit_code","section_description","section_id","section_code","justifyItems","uploadOperations","machineCode","AddMachineForm","brand","model","head","uploadMachines","machines","uploadMachinesData","workers","getAllWorkers","Workers","worker","empTypeCode","get_all_workers","updateWorkerInfo","AddWorkers","getAllWorkersFromOracle","empCodeType","uploadWorkers","uploadWorkersData","CreateCutBundlePage","render","rowData","createCutBundleForOrder","getOrdersFromOracleForCutBundleCreation","orderCode","getAllOrdersFromCutReport","grid","usertypes","Add","username","password","userType","line","section","lines","setLines","getLinesForUnit","LINES","get_all_lines","handleChange","line_code","addUser","line_id","line_description","user_type","onRowSelectionChange","currentRowsSelected","allRowsSelected","rowsSelected","selectedRows","setSelectedRows","download","delete","TransferScannings","warningDialogOpen","setWarningDialogOpen","setWorkers","selectedWorker","setSelectedWorker","selectedWorkerName","setSelectedWorkerName","workerCode","transferScanningRequest","code","onApply","picker","startDate","endDate","moment","_d","format","initialSettings","PaperProps","overflowY","overflowX","Home","Machine","Worker","CutBundleCreation","login","module","exports","time_interval","drawer_options","link"],"mappings":"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","file":"static/js/5.1f27a642.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MachineImage from \"../../assets/images/machines.jpg\";\r\nimport TransformIcon from \"@material-ui/icons/Transform\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { drawerWidth } from \"../../util/config\";\r\nimport { ListItemIcon } from \"@material-ui/core\";\r\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\r\nimport RateReviewIcon from \"@material-ui/icons/RateReview\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport PeopleOutlineIcon from \"@material-ui/icons/PeopleOutline\";\r\nimport DeveloperBoardIcon from \"@material-ui/icons/DeveloperBoard\";\r\nimport PlaylistAddCheckIcon from \"@material-ui/icons/PlaylistAddCheck\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n\r\n        color: \"white\",\r\n        backgroundImage: `linear-gradient(\r\n            rgba(21, 21, 21, 1.85),\r\n            rgba(21, 21, 21, 0.75)\r\n          ),url(${MachineImage})`,\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst DrawerComponent = (props) => {\r\n    const classes = useStyles();\r\n    //const [selected,setSelected] = React.useState(1)\r\n    const [cutReportMenuOpen, setcutReportMenuOpen] = React.useState(false);\r\n    const [StyleBulletinMenuOpen, setStyleBulletinMenuOpen] = React.useState(\r\n        false\r\n    );\r\n    const [operationsMenuOpen, setoperationsMenuOpen] = React.useState(false);\r\n    const [machinesMenuOpen, setmachinesMenuOpen] = React.useState(false);\r\n    const [workerMenuOpen, setworkerMenuOpen] = React.useState(false);\r\n\r\n    const handleCutReportClick = () => {\r\n        setcutReportMenuOpen(!cutReportMenuOpen);\r\n    };\r\n    const handleStyleBulletinClick = () => {\r\n        setStyleBulletinMenuOpen(!StyleBulletinMenuOpen);\r\n    };\r\n    const handleOperationClick = () => {\r\n        setoperationsMenuOpen(!operationsMenuOpen);\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            anchor=\"left\"\r\n        >\r\n            <div\r\n                style={{\r\n                    height: \"150px\",\r\n                    padding: \"15px\",\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                <img\r\n                    src={require(\"../../assets/images/usaparel_white.png\")}\r\n                    style={{ height: \"110%\" }}\r\n                />\r\n            </div>\r\n            {/* <div className={classes.toolbar} />\r\n        <Divider /> */}\r\n            <List>\r\n                <div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 1 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"dashboard\"}\r\n                        onClick={() => props.setSelected(1)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <DashboardIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={`Dashboard`} />\r\n                    </ListItem>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 2 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"orderTransfer\"}\r\n                        onClick={() => props.setSelected(2)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <TransformIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={`Order Transfer`} />\r\n                    </ListItem>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 3 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"orderTransfer\"}\r\n                        onClick={() => props.setSelected(3)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <DeleteSweepIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Delete Scanning\"} />\r\n                    </ListItem>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    {/* <ListItem button onClick={() => props.setSelected(4)}>\r\n                        <ListItemIcon>\r\n                            <UpdateIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Quantity Update\"} />\r\n                    </ListItem> */}\r\n\r\n                    <ListItem button onClick={handleCutReportClick}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Cut Report\" />\r\n                        {cutReportMenuOpen ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse\r\n                        in={cutReportMenuOpen}\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 7\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(7)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Upload Cut Report\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 4\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(4)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <RateReviewIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"View Cut Report\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem button onClick={handleStyleBulletinClick}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Style Bulletin\" />\r\n                        {StyleBulletinMenuOpen ? (\r\n                            <ExpandLess />\r\n                        ) : (\r\n                            <ExpandMore />\r\n                        )}\r\n                    </ListItem>\r\n                    <Collapse\r\n                        in={StyleBulletinMenuOpen}\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 6\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(6)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Upload Style Bulletin\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 5\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(5)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <RateReviewIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"View Style Bulletin\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => setmachinesMenuOpen(!machinesMenuOpen)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <DeveloperBoardIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Machines\" />\r\n                        {machinesMenuOpen ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse\r\n                        in={machinesMenuOpen}\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 12\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(12)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Add Machines\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 8\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(8)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <PlaylistAddCheckIcon\r\n                                        style={{ color: \"#fff\" }}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"View Machines\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem button onClick={handleOperationClick}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Operations\" />\r\n                        {operationsMenuOpen ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse\r\n                        in={operationsMenuOpen}\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                    >\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 11\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(11)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Upload Operations\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 9\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(9)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <PlaylistAddCheckIcon\r\n                                        style={{ color: \"#fff\" }}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"View Operations\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n\r\n                {/* <div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 9 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem button onClick={() => props.setSelected(9)}>\r\n                        <ListItemIcon>\r\n                            <PlaylistAddCheckIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Operation\"} />\r\n                    </ListItem>\r\n                </div> */}\r\n\r\n                <div\r\n                    style={{\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => setworkerMenuOpen(!workerMenuOpen)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <DeveloperBoardIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Workers\" />\r\n                        {workerMenuOpen ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse in={workerMenuOpen} timeout=\"auto\" unmountOnExit>\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 13\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(13)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <AssignmentIcon style={{ color: \"#fff\" }} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Upload Workers\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem\r\n                                button\r\n                                style={{\r\n                                    backgroundColor:\r\n                                        props.selected === 10\r\n                                            ? \"#900C3E\"\r\n                                            : \"transparent\",\r\n                                    margin: \"10px\",\r\n                                    borderRadius: \"5px\",\r\n                                }}\r\n                                onClick={() => props.setSelected(10)}\r\n                                className={classes.nested}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <PlaylistAddCheckIcon\r\n                                        style={{ color: \"#fff\" }}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"View Workers\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 14 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"CutBundleCreation\"}\r\n                        onClick={() => props.setSelected(14)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <TransformIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={`Cut/Bundle Creation`} />\r\n                    </ListItem>\r\n                </div>\r\n\r\n\t\t\t\t<div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 15 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"Users\"}\r\n                        onClick={() => props.setSelected(15)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <TransformIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={`Users`} />\r\n                    </ListItem>\r\n                </div>\r\n\t\t\t\t<div\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.selected === 16 ? \"#900C3E\" : \"transparent\",\r\n                        margin: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        key={\"Transfer Scannings\"}\r\n                        onClick={() => props.setSelected(16)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <TransformIcon style={{ color: \"#fff\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={`Transfer Scannings`} />\r\n                    </ListItem>\r\n                </div>\r\n            </List>\r\n\r\n\r\n\r\n\t\t\t<div\r\n                style={{ height: \"80px\", padding: \"15px\", textAlign: \"center\" }}\r\n            >\r\n                <img\r\n                    src={require(\"../../assets/images/WiMetrix4.png\")}\r\n\t\t\t\t\talt=\"Wimetrix logo\"\r\n                    style={{ height: \"90%\" }}\r\n                />\r\n            </div>\r\n\r\n\r\n            {/* <Divider /> */}\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default withRouter(DrawerComponent);\r\n","import React from \"react\";\r\nimport Drawer from \"../Drawer/Drawer\";\r\nimport { drawerWidth } from \"../../util/config\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    appBar: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst Layout = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const handleLogout = () => {\r\n        setLoading(true);\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            localStorage.clear();\r\n            props.history.push(\"/\");\r\n        }, 1000);\r\n    };\r\n    let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                    color=\"primary\"\r\n                    position=\"fixed\"\r\n                    className={classes.appBar}\r\n                >\r\n                    <Toolbar\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        </div>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            US APPAREL ONLINE PORTAL ({userInfo.unitCode})\r\n                        </Typography>\r\n                        <Typography\r\n                            className=\"logout\"\r\n                            variant=\"subtitle2\"\r\n                            onClick={handleLogout}\r\n                        >\r\n                            {loading === true ? (\r\n                                <CircularProgress\r\n                                    size=\"18px\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            ) : (\r\n                                `Logout`\r\n                            )}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    selected={props.selected}\r\n                    setSelected={props.setSelected}\r\n                />\r\n\r\n                <main className={classes.content}>\r\n                    <div className={classes.toolbar} />\r\n                    {props.children}\r\n                </main>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Layout);\r\n","import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Iframe from 'react-iframe';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n\tfield: {\r\n\t\t//width: '200px'\r\n\t},\r\n\tcolumnPaper: {\r\n\t\tdisplay: \"grid\",\r\n\t\tgridTemplateColumns: \"25% 25% 25% 25%\",\r\n\t\tpadding: \"10px\",\r\n\t\tmargin: \"10px 5px\",\r\n\t\theight:'inherit'\r\n\t},\r\n}));\r\n\r\nconst Dashboard = () => {\r\n\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\tflexDirection:\"column\",\r\n\t\t\t\t\talignItems:\"center\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{/* <Iframe url={userInfo.unitID===\"2\"?\r\n\t\t\t\t\"https://app.powerbi.com/view?r=eyJrIjoiNjYwODNhZjMtN2M0YS00ZmRmLThjYWEtNzE3OWI5OWYyYWU3IiwidCI6IjE0ZWY0NmQ0LTdhNTItNGZiYS1hYWZkLWJjOGY3NzM0ZWY2ZCIsImMiOjl9\"\r\n\t\t\t\t:\"https://app.powerbi.com/view?r=eyJrIjoiZmY2ZWQ4NjYtYjU5Zi00ZjZkLTllYzQtYmE3YTc0OTMyMjE4IiwidCI6IjE0ZWY0NmQ0LTdhNTItNGZiYS1hYWZkLWJjOGY3NzM0ZWY2ZCIsImMiOjl9\"}\r\n\t\t\t\t\twidth=\"80%\"\r\n\t\t\t\t\theight=\"750px\"\r\n\t\t\t\t\tStyle={{alignSelf:'center'}}\r\n\t\t\t\t\tid=\"myId\"\r\n\t\t\t\t\tclassName=\"myClassname\"\r\n\t\t\t\t\tdisplay=\"initial\"\r\n\t\t\t\t\tposition=\"relative\" /> */}\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nfunction desc(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction stableSort(array, cmp) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\nfunction getSorting(order, orderBy) {\r\n    return order === \"desc\"\r\n        ? (a, b) => desc(a, b, orderBy)\r\n        : (a, b) => -desc(a, b, orderBy);\r\n}\r\nfunction EnhancedTableHead(props) {\r\n    const {\r\n        classes,\r\n        onSelectAllClick,\r\n        order,\r\n        orderBy,\r\n        numSelected,\r\n        rowCount,\r\n        onRequestSort,\r\n        headCells,\r\n    } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={\r\n                            numSelected > 0 && numSelected < rowCount\r\n                        }\r\n                        checked={numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? \"right\" : \"left\"}\r\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : \"asc\"}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === \"desc\"\r\n                                        ? \"sorted descending\"\r\n                                        : \"sorted ascending\"}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n    headCells: PropTypes.array.isRequired,\r\n};\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === \"light\"\r\n            ? {\r\n                  color: theme.palette.secondary.main,\r\n                  backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n              }\r\n            : {\r\n                  color: theme.palette.text.primary,\r\n                  backgroundColor: theme.palette.secondary.dark,\r\n              },\r\n    title: {\r\n        flex: \"1 1 100%\",\r\n    },\r\n}));\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected, totalSum } = props;\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography\r\n                    className={classes.title}\r\n                    color=\"inherit\"\r\n                    variant=\"subtitle1\"\r\n                >\r\n                    {numSelected} cuts selected and Total Amount = {totalSum}\r\n                </Typography>\r\n            ) : (\r\n                <Typography\r\n                    className={classes.title}\r\n                    variant=\"h6\"\r\n                    id=\"tableTitle\"\r\n                >\r\n                    CUTS\r\n                </Typography>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n    totalSum: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n    },\r\n    paper: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n        fontSize: \"40pt\",\r\n    },\r\n    TableCell: {\r\n        fonfontSize: \"100pt\",\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: \"rect(0 0 0 0)\",\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: \"hidden\",\r\n        padding: 0,\r\n        position: \"absolute\",\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function EnhancedTable(props) {\r\n    console.log(props);\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState(\"asc\");\r\n    const [orderBy, setOrderBy] = React.useState(\"cut\");\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [columns, setColumns] = React.useState(props.headCells);\r\n    const [data, setData] = React.useState(props.data);\r\n    let count = 0;\r\n    let total_amount = 0;\r\n    data.map((row) => {\r\n        if (row.selection) {\r\n            count++;\r\n            total_amount = parseFloat(total_amount) + parseFloat(row.amount);\r\n        }\r\n        total_amount = Math.round(total_amount);\r\n    });\r\n\r\n    const [selectedCount, setSelectedCount] = React.useState(count);\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === \"asc\";\r\n        setOrder(isAsc ? \"desc\" : \"asc\");\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = data.map((n) => n.cut);\r\n            setSelected(newSelecteds);\r\n            let temp_data = data;\r\n            temp_data.map((row) => {\r\n                row.selection = true;\r\n                setData(temp_data);\r\n            });\r\n            return;\r\n        }\r\n        setSelected([]);\r\n        let temp_data = data;\r\n        temp_data.map((row) => {\r\n            row.selection = false;\r\n        });\r\n        setData(temp_data);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n        let temp_data = data;\r\n        temp_data.map((row) => {\r\n            if (row.cut === name) {\r\n                if (row.selection) {\r\n                    row.selection = false;\r\n                } else {\r\n                    row.selection = true;\r\n                }\r\n            }\r\n            setData(temp_data);\r\n        });\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (cut) => selected.indexOf(cut) !== -1;\r\n\r\n    const emptyRows =\r\n        rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n    props.setAmountFunction(total_amount);\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar\r\n                    numSelected={count}\r\n                    totalSum={total_amount}\r\n                />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? \"small\" : \"medium\"}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            headCells={columns}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={data.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(data, getSorting(order, orderBy))\r\n                                .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                )\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.cut);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) =>\r\n                                                handleClick(event, row.cut)\r\n                                            }\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.cut}\r\n                                            selected={row.selection}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={row.selection}\r\n                                                    inputProps={{\r\n                                                        \"aria-labelledby\": labelId,\r\n                                                    }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                component=\"th\"\r\n                                                id={labelId}\r\n                                                scope=\"row\"\r\n                                                style={{ fontSize: \"20px\" }}\r\n                                                padding=\"none\"\r\n                                            >\r\n                                                {row.cut}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"right\"\r\n                                                style={{ fontSize: \"20px\" }}\r\n                                            >\r\n                                                {row.bundle}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                style={{ fontSize: \"20px\" }}\r\n                                                align=\"right\"\r\n                                            >\r\n                                                {Math.round(row.amount)}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow\r\n                                    style={{\r\n                                        height: (dense ? 33 : 53) * emptyRows,\r\n                                    }}\r\n                                >\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5]}\r\n                    component=\"div\"\r\n                    count={data.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n    Paper,\r\n    TextField,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { Collapse, CardBody, Card } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport EnhancedTable from \"../orderCutTable\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {},\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        margin: \"10px 5px\",\r\n    },\r\n    button: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n}));\r\nfunction createData(cut, bundle, amount, selection) {\r\n    return { cut, bundle, amount, selection };\r\n}\r\nlet total_order_amount_for_partial = 0;\r\nfunction setAmountFunction(amount) {\r\n    total_order_amount_for_partial = amount;\r\n}\r\n\r\nlet orders = [];\r\nconst OrderTransferItem = (props) => {\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            id: \"cut\",\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: \"Cut\",\r\n        },\r\n        {\r\n            id: \"bundle\",\r\n            numeric: true,\r\n            disablePadding: false,\r\n            label: \"No. of Bundles\",\r\n        },\r\n        {\r\n            id: \"amount\",\r\n            numeric: true,\r\n            disablePadding: false,\r\n            label: \"Cut wise Amount\",\r\n        },\r\n\r\n        {\r\n            id: \"selection\",\r\n        },\r\n    ]);\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [status, setstatus] = React.useState(props.status);\r\n    const [value, setValue] = React.useState(\"complete\");\r\n    const [toggleText, setToggleText] = React.useState(\"Show Cuts\");\r\n    const [collapse, setCollapse] = useState(false);\r\n    const [orderAmount, setOrderAmount] = useState(0);\r\n    let [rows, setRows] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        props.selectedOrders.map((selectedOrder) => {\r\n            if (selectedOrder.order === props.order) {\r\n                setstatus(selectedOrder.status);\r\n            }\r\n        });\r\n        let cuts = [];\r\n        props.AllProgressCompleteData.map((order) => {\r\n            if (order.orderID === props.Order) {\r\n                let selection_flag = false;\r\n                props.selectedOrders.map((selected_order) => {\r\n                    selected_order.selected_cuts.map((cut) => {\r\n                        if (cut.cut === order.CutID) {\r\n                            selection_flag = cut.selection;\r\n                        }\r\n                    });\r\n                });\r\n                cuts.push(\r\n                    createData(\r\n                        order.CutID,\r\n                        order.TotalBundlesInCut,\r\n                        order.CutwiseAmount,\r\n                        selection_flag\r\n                    )\r\n                );\r\n            }\r\n        });\r\n        setRows(cuts);\r\n        props.selectedOrders.map((order) => {\r\n            if (order.value === props.Order) {\r\n                setValue(order[\"complete/partial\"]);\r\n                let total_amount = 0;\r\n                // if (order[\"complete/partial\"] === \"complete\") {\r\n                props.AllProgressCompleteData.map((item) => {\r\n                    if (item.orderID === props.Order) {\r\n                        total_amount =\r\n                            parseFloat(total_amount) +\r\n                            parseFloat(item.CutwiseAmount);\r\n                    }\r\n                });\r\n                setOrderAmount(total_amount);\r\n                // setAmountFunction(0);\r\n                //}\r\n            }\r\n        });\r\n    }, []);\r\n    const handleRadioChange = (event) => {\r\n        setValue(event.target.value);\r\n        props.selectedOrders.map((order) => {\r\n            if (order.value === props.Order) {\r\n                order[\"complete/partial\"] = event.target.value;\r\n                order[\"selected_cuts\"] = rows;\r\n                let selected_cuts_count = 0;\r\n                rows.map((row) => {\r\n                    if (row.selection) {\r\n                        selected_cuts_count++;\r\n                    }\r\n                });\r\n                if (selected_cuts_count === 0) {\r\n                    setAmountFunction(0);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    const cutSelectionChangeListener = (rows) => {\r\n        setRows(rows);\r\n    };\r\n    const toggle = () => {\r\n        setCollapse(!collapse);\r\n        if (!collapse) {\r\n            setToggleText(\"Hide Cuts\");\r\n        } else {\r\n            setToggleText(\"Show Cuts\");\r\n        }\r\n    };\r\n    const classes = useStyles();\r\n    return (\r\n        <Paper\r\n            className={classes.paper}\r\n            style={{\r\n                backgroundColor: \"#FFF\",\r\n                margin: \"15px 5px 5px 5px\",\r\n            }}\r\n        >\r\n            <Grid\r\n                container\r\n                style={{\r\n                    backgroundColor:\r\n                        status === \"complete\"\r\n                            ? \"#488F48\"\r\n                            : status === \"failed\"\r\n                            ? \"#F84242\"\r\n                            : \"#FFF\",\r\n                    margin: \"15px 5px 5px 5px\",\r\n                }}\r\n            >\r\n                {/* <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    <DeleteIcon fontSize=\"large\" />\r\n                </IconButton> */}\r\n                <Grid\r\n                    item\r\n                    lg={3}\r\n                    md={3}\r\n                    sm={3}\r\n                    xs={3}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography\r\n                        style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            marginTop: \"10px\",\r\n                            marginLeft: \"15px\",\r\n                            justifyContent: \"center\",\r\n                            fontSize: \"20px\",\r\n                        }}\r\n                        variant=\"subtitle2\"\r\n                    >\r\n                        {props.Order}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n                    lg={3}\r\n                    md={3}\r\n                    sm={3}\r\n                    xs={3}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <FormControl component=\"fieldset\">\r\n                        <RadioGroup\r\n                            row\r\n                            onChange={handleRadioChange}\r\n                            aria-label=\"position\"\r\n                            name=\"position\"\r\n                            value={value}\r\n                            style={{ fontSize: \"20px\" }}\r\n                            setValue=\"complete\"\r\n                            defaultValue=\"top\"\r\n                        >\r\n                            <FormControlLabel\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    fontSize: \"20px\",\r\n                                }}\r\n                                value=\"complete\"\r\n                                control={<Radio color=\"primary\" />}\r\n                                label=\"Complete\"\r\n                            />\r\n                            <FormControlLabel\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    fontSize: \"20px\",\r\n                                }}\r\n                                value=\"partial\"\r\n                                control={<Radio color=\"primary\" />}\r\n                                label=\"Partial\"\r\n                            />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid\r\n                    item\r\n                    lg={3}\r\n                    md={3}\r\n                    sm={3}\r\n                    xs={3}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography\r\n                        style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            marginTop: \"10px\",\r\n                            marginLeft: \"15px\",\r\n                            fontSize: \"20px\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                        variant=\"subtitle2\"\r\n                    >\r\n                        {value === \"complete\"\r\n                            ? Math.round(orderAmount)\r\n                            : total_order_amount_for_partial}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n                    lg={3}\r\n                    md={3}\r\n                    sm={3}\r\n                    xs={3}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    {value === \"complete\" && (\r\n                        <Typography\r\n                            style={{\r\n                                display: \"flex\",\r\n                                textAlign: \"center\",\r\n                                marginTop: \"10px\",\r\n                                marginLeft: \"15px\",\r\n                                fontSize: \"20px\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                            variant=\"subtitle2\"\r\n                        >\r\n                            All Cuts for this Order have been included\r\n                        </Typography>\r\n                    )}\r\n                    {value === \"partial\" && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={toggle}\r\n                            className={classes.button}\r\n                            endIcon={\r\n                                collapse ? (\r\n                                    <KeyboardArrowUpIcon />\r\n                                ) : (\r\n                                    <KeyboardArrowDownIcon />\r\n                                )\r\n                            }\r\n                        >\r\n                            {toggleText}\r\n                        </Button>\r\n                    )}\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                    {value === \"partial\" && collapse == true && (\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            <EnhancedTable\r\n                                headCells={headCells}\r\n                                data={rows}\r\n                                totalAmount={orderAmount}\r\n                                setAmountFunction={setAmountFunction}\r\n                                setSelection={cutSelectionChangeListener}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default OrderTransferItem;\r\n","import React from \"react\";\r\nimport { Paper, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport OrderTransferItem from \"../../components/orderTransfer/orderTransferListItem/orderTransferItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { serverIP, monthNames } from \"../../util/Constants\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\n\r\nconst headers = [\r\n    { label: \"Order\", key: \"order\" },\r\n    { label: \"Selected Cuts\", key: \"cuts\" },\r\n    { label: \"Amount\", key: \"amount\" },\r\n];\r\n\r\nlet orders = [];\r\nlet all_progress_complete_data = [];\r\nconst OrderTransfer = (props) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    const classes = useStyles();\r\n    const [selectedOptions, setSelectedOptions] = React.useState([]);\r\n    const [selectedOrders, setSelectedOrders] = React.useState([]);\r\n    const [finalData, setFinalData] = React.useState([]);\r\n    const [Loading, setLoading] = React.useState(false);\r\n\r\n    const handleDisagreeDialogClick = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleAgreeDialogClick = () => {\r\n        setOpen(false);\r\n        transfer();\r\n    };\r\n    React.useEffect(() => {\r\n        NotificationManager.info(\"Fetching orders\");\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(\r\n            serverIP +\r\n                \"/TransferScannings/getOrdersFromProgressComplete.php?unit_id=\" +\r\n                userInfo.unitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        all_progress_complete_data = data.Orders;\r\n                        data.Orders.map((order) => {\r\n                            var colResult = {};\r\n                            var repeated = orders.filter(function (a) {\r\n                                return a.value == order.orderID;\r\n                            }).length;\r\n                            if (!repeated) {\r\n                                colResult[\"value\"] = order.orderID;\r\n                                colResult[\"label\"] = order.orderID;\r\n                                colResult[\"complete/partial\"] = \"complete\";\r\n                                colResult[\"selected_cuts\"] = [];\r\n                                colResult[\"order_amount\"] = 0;\r\n                                orders.push(colResult);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Orders\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n    const handleOrderSelectionChange = (event) => {\r\n        if (event !== null) {\r\n            var difference = event.filter((x) => !selectedOrders.includes(x));\r\n            difference.map((order) => {\r\n                order[\"complete/partial\"] = \"complete\";\r\n                order[\"status\"] = \"pending\";\r\n                order[\"selected_cuts\"] = [];\r\n            });\r\n            setSelectedOrders(event);\r\n        } else {\r\n            setSelectedOrders([]);\r\n        }\r\n    };\r\n    const OrdersList = () => {\r\n        return (\r\n            <List className={classes.root} subheader={<li />}>\r\n                {selectedOrders.map((item) => (\r\n                    <li>\r\n                        <OrderTransferItem\r\n                            status={item.status}\r\n                            Order={item.value}\r\n                            AllProgressCompleteData={all_progress_complete_data}\r\n                            selectedOrders={selectedOrders}\r\n                        ></OrderTransferItem>\r\n                    </li>\r\n                ))}\r\n            </List>\r\n        );\r\n    };\r\n    const generateExcel = () => {\r\n        let orders_excel_data = [];\r\n        var total_amount_for_pay_roll = 0;\r\n        selectedOrders.map((order) => {\r\n            let orders_data = {};\r\n            let cuts_data = \"\";\r\n            if (order[\"complete/partial\"] === \"complete\") {\r\n                let order_amount = 0;\r\n                let cuts = \"\";\r\n                let count = 0;\r\n                all_progress_complete_data.map((item) => {\r\n                    if (item.orderID === order.value) {\r\n                        var colResult = {};\r\n                        // colResult[\"order\"] = item.orderID;\r\n                        // colResult[\"cut\"] = item.CutID;\r\n                        // colResult[\"amount\"] = item.CutwiseAmount;\r\n                        // cuts_data.push(colResult);\r\n\r\n                        if (count > 0) {\r\n                            cuts = cuts + \" , \" + item.CutID;\r\n                        } else {\r\n                            cuts = item.CutID;\r\n                        }\r\n                        count = count + 1;\r\n                        order_amount =\r\n                            parseFloat(order_amount) +\r\n                            parseFloat(item.CutwiseAmount);\r\n                    }\r\n                });\r\n                orders_data[\"order\"] = order.value;\r\n                orders_data[\"cuts\"] = cuts;\r\n                orders_data[\"amount\"] = Math.round(order_amount);\r\n                total_amount_for_pay_roll =\r\n                    parseFloat(total_amount_for_pay_roll) +\r\n                    parseFloat(order_amount);\r\n                orders_excel_data.push(orders_data);\r\n            } else {\r\n                let order_amount = 0;\r\n                let cuts = \"\";\r\n                let count = 0;\r\n                order.selected_cuts.map((cut) => {\r\n                    if (cut.selection) {\r\n                        // var colResult = {};\r\n                        // colResult[\"order\"] = order.value;\r\n                        // colResult[\"cut\"] = cut.cut;\r\n                        // colResult[\"amount\"] = cut.amount;\r\n                        // cuts_data.push(colResult);\r\n                        if (count > 0) {\r\n                            cuts = cuts + \" , \" + cut.cut;\r\n                        } else {\r\n                            cuts = cut.cut;\r\n                        }\r\n                        count = count + 1;\r\n                        order_amount =\r\n                            parseFloat(order_amount) + parseFloat(cut.amount);\r\n                    }\r\n                });\r\n                if (count > 0) {\r\n                    orders_data[\"order\"] = order.value;\r\n                    orders_data[\"cuts\"] = cuts;\r\n                    orders_data[\"amount\"] = Math.round(order_amount);\r\n                    orders_excel_data.push(orders_data);\r\n                    total_amount_for_pay_roll =\r\n                        parseFloat(total_amount_for_pay_roll) +\r\n                        parseFloat(order_amount);\r\n                } else {\r\n                    NotificationManager.error(\r\n                        \"Select Cuts for order: \" + order.value\r\n                    );\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        let total_amount_info = {};\r\n        total_amount_info[\"order\"] = \"\";\r\n        total_amount_info[\"cuts\"] = \"Total Amount\";\r\n        total_amount_info[\"amount\"] = Math.round(total_amount_for_pay_roll);\r\n        orders_excel_data.push(total_amount_info);\r\n        setFinalData(orders_excel_data);\r\n        return true;\r\n    };\r\n    const handleTransferClick = () => {\r\n        setOpen(true);\r\n    };\r\n    const transfer = () => {\r\n        let orders;\r\n        let cuts;\r\n        if (selectedOrders.length > 0) {\r\n            // setOpen(true);\r\n            let orders_excel_data = [];\r\n            var total_amount_for_pay_roll = 0;\r\n            selectedOrders.map((order) => {\r\n                let orders_data = {};\r\n                let cuts_data = \"\";\r\n                if (order[\"complete/partial\"] === \"complete\") {\r\n                    let order_amount = 0;\r\n                    let cuts = [];\r\n                    let count = 0;\r\n                    all_progress_complete_data.map((item) => {\r\n                        if (item.orderID === order.value) {\r\n                            var colResult = {};\r\n                            // colResult[\"order\"] = item.orderID;\r\n                            // colResult[\"cut\"] = item.CutID;\r\n                            // colResult[\"amount\"] = item.CutwiseAmount;\r\n                            // cuts_data.push(colResult);\r\n\r\n                            cuts.push(item.CutID);\r\n                            order_amount = order_amount + item.CutwiseAmount;\r\n                        }\r\n                    });\r\n                    orders_data[\"order\"] = order.value;\r\n                    orders_data[\"cuts\"] = cuts;\r\n                    orders_data[\"amount\"] = Math.round(order_amount);\r\n                    orders_data[\"selection\"] = \"complete\";\r\n                    total_amount_for_pay_roll =\r\n                        total_amount_for_pay_roll + order_amount;\r\n                    orders_excel_data.push(orders_data);\r\n                } else {\r\n                    let order_amount = 0;\r\n                    let cuts = [];\r\n                    let count = 0;\r\n                    order.selected_cuts.map((cut) => {\r\n                        if (cut.selection) {\r\n                            // var colResult = {};\r\n                            // colResult[\"order\"] = order.value;\r\n                            // colResult[\"cut\"] = cut.cut;\r\n                            // colResult[\"amount\"] = cut.amount;\r\n                            // cuts_data.push(colResult);\r\n                            cuts.push(cut.cut);\r\n                            count = count + 1;\r\n                            order_amount = order_amount + cut.amount;\r\n                        }\r\n                    });\r\n                    if (count > 0) {\r\n                        orders_data[\"order\"] = order.value;\r\n                        orders_data[\"cuts\"] = cuts;\r\n                        orders_data[\"amount\"] = Math.round(order_amount);\r\n                        orders_data[\"selection\"] = \"partial\";\r\n                        orders_excel_data.push(orders_data);\r\n                        total_amount_for_pay_roll =\r\n                            total_amount_for_pay_roll + order_amount;\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Select Cuts for order: \" + order.value\r\n                        );\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n            let total_amount_info = {};\r\n            total_amount_info[\"order\"] = \"\";\r\n            total_amount_info[\"cuts\"] = \"Total Amount\";\r\n            //   orders_excel_data.push(total_amount_info);\r\n            setPayRollMonth(orders_excel_data);\r\n        } else {\r\n            NotificationManager.error(\"No Orders selected for transfer\");\r\n            NotificationManager.info(\r\n                \"Select Orders and their respective Cuts for transfer\"\r\n            );\r\n        }\r\n    };\r\n    async function setPayRollMonth(orders_data) {\r\n        let requests = [];\r\n        NotificationManager.info(\"Transfering Scannings\");\r\n        for (let x = 0; x < orders_data.length; x++) {\r\n            let cut_count = orders_data[x].cuts.length;\r\n            let cut_uploaded_count = 0;\r\n            let cuts = orders_data[x].cuts;\r\n            for (let y = 0; y < cuts.length; y++) {\r\n                setLoading(true);\r\n                let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n                await fetch(\r\n                    serverIP + \"TransferScannings/transferPayrollCutWise.php\",\r\n                    {\r\n                        method: \"POST\",\r\n                        body: JSON.stringify({\r\n                            orders: orders_data[x].order,\r\n                            Cuts: cuts[y],\r\n                            month: monthNames[new Date().getMonth()],\r\n                            unit_id: userInfo.unitID,\r\n                        }),\r\n                    }\r\n                )\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return response.json();\r\n                        } else {\r\n                            throw new Error(\"Something went wrong\");\r\n                        }\r\n                    })\r\n                    .then((data) => {\r\n                        setLoading(false);\r\n                        try {\r\n                            if (data.Error_No == 0) {\r\n                                var columnsJSON = [];\r\n                                console.log(data);\r\n                                cut_uploaded_count++;\r\n                            } else {\r\n                                NotificationManager.error(\r\n                                    \"Unable to fetch Scannings\" +\r\n                                        data.Error_Description\r\n                                );\r\n                            }\r\n                        } catch (ex) {\r\n                            console.log(\"error\");\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                        setLoading(false);\r\n                        // var temp = [...selectedOrders];\r\n                        // temp.map((item) => {\r\n                        //     if (item.value === orders_data[x].order) {\r\n                        //         item.status = \"failed\";\r\n                        //     }\r\n                        // });\r\n                        // setSelectedOrders(temp);\r\n                        NotificationManager.error(\r\n                            \"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n                        );\r\n                    });\r\n            }\r\n            if (cut_uploaded_count === cut_count) {\r\n                var temp = [...selectedOrders];\r\n                temp.map((item) => {\r\n                    if (item.value === orders_data[x].order) {\r\n                        item.status = \"complete\";\r\n                    }\r\n                });\r\n                setSelectedOrders(temp);\r\n            } else {\r\n                var temp = [...selectedOrders];\r\n                temp.map((item) => {\r\n                    if (item.value === orders_data[x].order) {\r\n                        item.status = \"failed\";\r\n                    }\r\n                });\r\n                setSelectedOrders(temp);\r\n            }\r\n        }\r\n    }\r\n    const transferScanningRequest = async (order) => {\r\n        console.log(order);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay\r\n                active={Loading}\r\n                spinner\r\n                text={\"Fetching orders data\"}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">\r\n                        Order Scanning Transfer\r\n                    </Typography>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid\r\n                            item\r\n                            lg={4}\r\n                            md={4}\r\n                            sm={4}\r\n                            xs={4}\r\n                            style={{ padding: \"0px 5px\" }}\r\n                        >\r\n                            <Select\r\n                                styles={{ backgroundColor: \"primary\" }}\r\n                                isMulti\r\n                                label=\"Order\"\r\n                                onChange={handleOrderSelectionChange}\r\n                                options={orders}\r\n                                isSearchable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your order\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={4}\r\n                            md={4}\r\n                            sm={4}\r\n                            xs={4}\r\n                            style={{ padding: \"0px 5px\" }}\r\n                        ></Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={4}\r\n                            md={4}\r\n                            sm={4}\r\n                            xs={4}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        >\r\n                            <CSVLink\r\n                                data={finalData}\r\n                                headers={headers}\r\n                                asyncOnClick={true}\r\n                                onClick={(event, done) => {\r\n                                    if (generateExcel()) {\r\n                                        done(); // 👍🏻 Your click handling logic\r\n                                    } else {\r\n                                        done(false);\r\n                                    }\r\n                                }}\r\n                                filename={\r\n                                    \"Scannings data \" +\r\n                                    monthNames[new Date().getMonth()] +\r\n                                    \".csv\"\r\n                                }\r\n                                target=\"_blank\"\r\n                            >\r\n                                <Fab\r\n                                    color=\"primary\"\r\n                                    aria-label=\"Next\"\r\n                                    style={{\r\n                                        marginRight: \"20px\",\r\n                                        width: \"50px\",\r\n                                        height: \"50px\",\r\n                                    }}\r\n                                >\r\n                                    <DescriptionIcon />\r\n                                </Fab>\r\n                            </CSVLink>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleTransferClick}\r\n                                disableElevation\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                }}\r\n                            >\r\n                                Transfer Scannings\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={2}\r\n                            md={2}\r\n                            sm={2}\r\n                            xs={2}\r\n                            style={{ margin: \"0px 0px 0px 0px\" }}\r\n                        ></Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"20px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={3} md={3} sm={3} xs={3}>\r\n                            <Typography\r\n                                style={{ textAlign: \"center\" }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                ORDER\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3} sm={3} xs={3}>\r\n                            <Typography\r\n                                style={{ textAlign: \"center\" }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                COMPLETE/PARTIAL\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item lg={3} md={3} sm={3} xs={3}>\r\n                            <Typography\r\n                                style={{ textAlign: \"center\" }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                TOTAL AMOUNT OF ORDER\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item lg={3} md={3} sm={3} xs={3}>\r\n                            <Typography\r\n                                style={{ textAlign: \"center\" }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                CUTS\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                <Dialog\r\n                    fullScreen={fullScreen}\r\n                    open={open}\r\n                    aria-labelledby=\"responsive-dialog-title\"\r\n                >\r\n                    <DialogTitle id=\"responsive-dialog-title\">\r\n                        {\"Proceed with scanning transfer?\"}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Are you sure you want to procceed with scanning\r\n                            transfer ?.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            autoFocus\r\n                            onClick={handleDisagreeDialogClick}\r\n                            color=\"primary\"\r\n                        >\r\n                            Disagree\r\n                        </Button>\r\n                        <Button\r\n                            onClick={handleAgreeDialogClick}\r\n                            color=\"primary\"\r\n                            autoFocus\r\n                        >\r\n                            Agree\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {selectedOptions.length != null && <OrdersList />}\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderTransfer;\r\n","import React from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport default function MaterialTableDemo(props) {\r\n    const [state, setState] = React.useState({\r\n        columns: props.headCells,\r\n    });\r\n    const [data, setData] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setData(props.Rows);\r\n    }, [props.Rows]);\r\n\r\n    React.useEffect(() => {}, []);\r\n    return (\r\n        <MaterialTable\r\n            style={{ padding: \"15px\" }}\r\n            title={\"\"}\r\n            columns={state.columns}\r\n            data={data}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            if (oldData) {\r\n                                props.UpdateQuantityFunction(\r\n                                    newData.itemID,\r\n                                    newData.quantity,\r\n                                    newData,\r\n                                    oldData\r\n                                );\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                // onRowDelete: (oldData) =>\r\n                //     new Promise((resolve) => {\r\n                //         setTimeout(() => {\r\n                //             resolve();\r\n                //             // setState((prevState) => {\r\n                //             //     const data = [...prevState.data];\r\n                //             //     data.splice(data.indexOf(oldData), 1);\r\n                //             //     return { ...prevState, data };\r\n                //             // });\r\n                //         }, 600);\r\n                //     }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { connect, ReactReduxContext } from \"react-redux\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport OrderTransferItem from \"../../../components/orderTransfer/orderTransferListItem/orderTransferItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {\r\n\tserverIP,\r\n\tforViewgetOrdersFromCutReport,\r\n\tforViewgetCutsForOrder,\r\n\tforViewgetBundlesForOrderCut,\r\n\tupdateBundle,\r\n} from \"../../../util/Constants\";\r\nimport MaterialTableDemo from \"../../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n\tfield: {\r\n\t\t//width: '200px'\r\n\t},\r\n\tgreenAvatar: {\r\n\t\tmarginRight: \"10px\",\r\n\t\tcolor: \"#fff\",\r\n\t\tbackgroundColor: green[500],\r\n\t},\r\n\troot: {\r\n\t\twidth: \"100%\",\r\n\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tposition: \"relative\",\r\n\t\toverflow: \"auto\",\r\n\t\tmaxHeight: \"850px\",\r\n\t},\r\n\tcolumnPaper: {\r\n\t\tdisplay: \"grid\",\r\n\t\tgridTemplateColumns: \"25% 25% 25% 25%\",\r\n\t\tpadding: \"5px\",\r\n\t\tmargin: \"10px 5px\",\r\n\t},\r\n}));\r\nfunction createData(itemID, bundle, quantity, size,special_process) {\r\n\treturn { itemID, bundle, quantity, size ,special_process};\r\n}\r\nlet orders = [];\r\nlet cuts = [];\r\nlet all_progress_complete_data = [];\r\nvar orders_excel_data = [];\r\nlet selected_cut = null;\r\nlet selected_order = null;\r\nlet data = [];\r\n\r\nlet quantitySum = 0;\r\n\r\nconst UpdateQuantity = (props) => {\r\n\tconst classes = useStyles();\r\n\tconst [Loading, setLoading] = React.useState(false);\r\n\tconst [selectedCut, setSelectedCut] = React.useState(null);\r\n\tlet [rows, setRows] = React.useState([]);\r\n\tconst [orderQuantity, setOrderQuantity] = React.useState(null);\r\n\tconst [totalCuts, setTotalCuts] = React.useState(null);\r\n\tconst [headCells, setHeadCells] = React.useState([\r\n\t\t{\r\n\t\t\tfield: \"bundle\",\r\n\t\t\ttitle: \"Bundle\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"quantity\",\r\n\t\t\ttitle: \"Quantity\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"size\",\r\n\t\t\ttitle: \"Size\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"special_process\",\r\n\t\t\ttitle: \"Special Process\",\r\n\t\t\teditable: false,\r\n\t\t}\r\n\t]);\r\n\tReact.useEffect(() => {\r\n\r\n\t\tquantitySum = 0;\r\n\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\tforViewgetOrdersFromCutReport +\r\n\t\t\t\"?unitID=\" +\r\n\t\t\tuserInfo.unitID\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tall_progress_complete_data = data.Orders;\r\n\t\t\t\t\t\tdata.Orders.map((order) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tvar repeated = orders.filter(function(a) {\r\n\t\t\t\t\t\t\t\treturn a.value == order.orderID;\r\n\t\t\t\t\t\t\t}).length;\r\n\t\t\t\t\t\t\tif (!repeated) {\r\n\t\t\t\t\t\t\t\tcolResult[\"value\"] = order.orderID;\r\n\t\t\t\t\t\t\t\tcolResult[\"label\"] = order.orderID;\r\n\t\t\t\t\t\t\t\tcolResult[\"orderQuantity\"] = order.orderQuantity;\r\n\t\t\t\t\t\t\t\tcolResult[\"totalCuts\"] = order.totalCuts;\r\n\t\t\t\t\t\t\t\torders.push(colResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Orders\" + data.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}, []);\r\n\tfunction get_cuts_for_orders(order) {\r\n\t\tcuts = [];\r\n\t\tsetLoading(true);\r\n\t\tfetch(serverIP + forViewgetCutsForOrder + \"?\" + \"orderID=\" + order)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tdata.Cuts.map((cut) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tcolResult[\"value\"] = cut.cutID;\r\n\t\t\t\t\t\t\tcolResult[\"label\"] = cut.cutID;\r\n\t\t\t\t\t\t\tcuts.push(colResult);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Cuts\" + data.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tfunction get_bundles_for_cut_order(order, cut) {\r\n\t\tlet bundles = [];\r\n\t\tsetLoading(true);\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\tforViewgetBundlesForOrderCut +\r\n\t\t\t\"?\" +\r\n\t\t\t\"orderID=\" +\r\n\t\t\torder +\r\n\t\t\t\"&&cutID=\" +\r\n\t\t\tcut\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\r\n\t\t\t\t\t\tdata.Bundles.map((bundle) => {\r\n\t\t\t\t\t\t\tbundles.push(\r\n\t\t\t\t\t\t\t\tcreateData(\r\n\t\t\t\t\t\t\t\t\tbundle.itemID,\r\n\t\t\t\t\t\t\t\t\tbundle.bundleID,\r\n\t\t\t\t\t\t\t\t\tbundle.quantity,\r\n\t\t\t\t\t\t\t\t\tbundle.size,\r\n\t\t\t\t\t\t\t\t\tbundle.special_process\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdata = bundles;\r\n\t\t\t\t\t\tconsole.log(data);\r\n\r\n\t\t\t\t\t\tquantitySum = bundles.reduce((sum, current) => sum += parseInt(current.quantity), 0);\r\n\r\n\t\t\t\t\t\tsetRows(bundles);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Bundles\" + data.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tfunction update_bundle_quantity(itemID, quantity, newData, oldData) {\r\n\t\tsetLoading(true);\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\tupdateBundle +\r\n\t\t\t\"?\" +\r\n\t\t\t\"itemID=\" +\r\n\t\t\titemID +\r\n\t\t\t\"&&quantity=\" +\r\n\t\t\tquantity\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === \"0\") {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tNotificationManager.success(\r\n\t\t\t\t\t\t\t\"Bundle quantity updated successfully\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlet temp = [...rows];\r\n\t\t\t\t\t\ttemp[temp.indexOf(oldData)] = newData;\r\n\r\n\t\t\t\t\t\tquantitySum = temp.reduce((sum, current) => sum += parseInt(current.quantity), 0);\r\n\t\t\t\t\t\tsetRows(temp);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to update bundle quantity\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tconst handleOrderDropDownChange = (event) => {\r\n\t\tsetRows([]);\r\n\t\tquantitySum = 0;\r\n\r\n\t\tif (event != null) {\r\n\t\t\tselected_order = event.value;\r\n\t\t\tsetOrderQuantity(event.orderQuantity);\r\n\t\t\tsetTotalCuts(event.totalCuts);\r\n\t\t\tget_cuts_for_orders(event.value);\r\n\t\t} else {\r\n\t\t\tselected_order = null;\r\n\t\t}\r\n\t};\r\n\tconst handleCutDropDownChange = (event) => {\r\n\t\tsetRows([]);\r\n\t\tquantitySum = 0;\r\n\r\n\t\tif (event != null) {\r\n\t\t\tselected_cut = event.value;\r\n\t\t\tget_bundles_for_cut_order(selected_order, selected_cut);\r\n\t\t} else {\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tpadding: \"0px 0px 15px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography variant=\"h5\">Bundle Quantity Update</Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tORDER\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={2} md={2} sm={2} xs={2}>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tclassName=\"basic-single\"\r\n\t\t\t\t\t\t\t\tlabel=\"Cut\"\r\n\t\t\t\t\t\t\t\tonChange={handleOrderDropDownChange}\r\n\t\t\t\t\t\t\t\toptions={orders}\r\n\t\t\t\t\t\t\t\tisSearchable={true}\r\n\t\t\t\t\t\t\t\tcomponents={animatedComponents}\r\n\t\t\t\t\t\t\t\thelperText=\"Please select your order\"\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCUT\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={2} md={2} sm={2} xs={2}>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tclassName=\"basic-single\"\r\n\t\t\t\t\t\t\t\tlabel=\"Cut\"\r\n\t\t\t\t\t\t\t\tonChange={handleCutDropDownChange}\r\n\t\t\t\t\t\t\t\toptions={cuts}\r\n\t\t\t\t\t\t\t\tisSearchable={true}\r\n\t\t\t\t\t\t\t\tisClearable={true}\r\n\t\t\t\t\t\t\t\tcomponents={animatedComponents}\r\n\t\t\t\t\t\t\t\thelperText=\"Please select your Cut\"\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{selected_order !== null && (<Grid item lg={2} md={2} sm={2} xs={2}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tOrder Quantity:  {orderQuantity}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>)}\r\n\t\t\t\t\t\t{selected_order !== null && (<Grid item lg={2} md={2} sm={2} xs={2}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tTotal No Cuts: {totalCuts}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>)}\r\n\r\n\t\t\t\t\t\t{/* <Grid\r\n                            item\r\n                            lg={5}\r\n                            md={5}\r\n                            sm={5}\r\n                            xs={5}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                }}\r\n                            >\r\n                                Transfer Scannings\r\n                            </Button>\r\n                        </Grid> */}\r\n\r\n\t\t\t\t\t\t{quantitySum !== 0 &&\r\n\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\txs={2}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tmarginLeft: 'auto'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tTotal Cut Quantity: {quantitySum}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t\t<Paper\r\n\t\t\t\t\tclassName={classes.paper}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: \"#900C3E\",\r\n\t\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\t\tmargin: \"10px 10px 10px 10px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={12} md={12} sm={12} xs={12}>\r\n\t\t\t\t\t\t\t{rows.length > 0 && (\r\n\t\t\t\t\t\t\t\t<MaterialTableDemo\r\n\t\t\t\t\t\t\t\t\theadCells={headCells}\r\n\t\t\t\t\t\t\t\t\tRows={rows}\r\n\t\t\t\t\t\t\t\t\tUpdateQuantityFunction={\r\n\t\t\t\t\t\t\t\t\t\tupdate_bundle_quantity\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t</LoadingOverlay>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UpdateQuantity;\r\n","import MUIDataTable from \"mui-datatables\";\r\nimport React from \"react\";\r\nconst Datatable = (props) => {\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\tname: \"Scanning_time\",\r\n\t\t\tlabel: \"Scan Time\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: false,\r\n\t\t\t\tsort: true,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"lineDescription\",\r\n\t\t\tlabel: \"Line Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"operationDescription\",\r\n\t\t\tlabel: \"Operation Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"sectionDescription\",\r\n\t\t\tlabel: \"Section Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"workerName\",\r\n\t\t\tlabel: \"Worker Name\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"cutID\",\r\n\t\t\tlabel: \"Cut\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"bundleID\",\r\n\t\t\tlabel: \"Bundle\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t];\r\n\tconst data = props.Rows;\r\n\tconst options = {\r\n\t\tfilterType: 'dropdown',\r\n\t\tonRowsDelete: (rowsDeleted) => {\r\n\t\t\tlet rowsToBeDeleted= [];\r\n\t\t\trowsDeleted.data.map((index)=>{\r\n\t\t\t\trowsToBeDeleted.push(data[index.dataIndex].bundle_scan_id);\r\n\t\t\t})\r\n\t\t\tprops.setSelectedRowsForDeletion(rowsToBeDeleted)\r\n\t\t\tprops.handleDeleteScanningsButtonClick()\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\ttoolbar: {\r\n\t\t\tsearch: \"Search\",\r\n\t\t\tdownloadCsv: false,\r\n\t\t\tprint: false,\r\n\t\t\tviewColumns: \"View Columns\",\r\n\t\t\tfilterTable: \"Filter Table\",\r\n\t\t  },\r\n\r\n\t};\r\n\treturn (\r\n\t\t<MUIDataTable\r\n\t\t\ttitle={\"Bundle scannings\"}\r\n\t\t\tdata={data}\r\n\t\t\tcolumns={columns}\r\n\t\t\toptions={options}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default(Datatable)","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport OrderTransferItem from \"../../components/orderTransfer/orderTransferListItem/orderTransferItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { serverIP, monthNames } from \"../../util/Constants\";\r\nimport MaterialTableDemo from \"../../components/DeleteScannings/DeleteScanningsTable\";\r\nimport DataTable from \"./datatable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(\r\n\tbundle_scan_id,\r\n    Scanning_time,\r\n    operationAutoID,\r\n    operationDescription,\r\n    operationID,\r\n    workerID,\r\n    workerName,\r\n    machineID,\r\n    machineType,\r\n    styleID,\r\n    lineID,\r\n    lineDescription,\r\n    sectionID,\r\n    sectionDescription,\r\n    cutID,\r\n    bundleID\r\n) {\r\n    return {\r\n\t\tbundle_scan_id,\r\n        Scanning_time,\r\n        operationAutoID,\r\n        operationDescription,\r\n        operationID,\r\n        workerID,\r\n        workerName,\r\n        machineID,\r\n        machineType,\r\n        styleID,\r\n        lineID,\r\n        lineDescription,\r\n        sectionID,\r\n        sectionDescription,\r\n        cutID,\r\n        bundleID,\r\n    };\r\n}\r\nlet orders = [];\r\nlet operations = [];\r\nlet bundles = [];\r\nlet scannings_data = [];\r\nlet selected_operations = [];\r\nlet selected_order = null;\r\nlet selected_bundle = null;\r\nlet data = [];\r\nconst DeleteScannings = (props) => {\r\n    let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [selectedRowsForDeletion, setSelectedRowsForDeletion] = React.useState([]);\r\n    let [rows, setRows] = React.useState([]);\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"Scanning_time\",\r\n            title: \"Scan Time\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"lineDescription\",\r\n            title: \"Line Description\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"operationDescription\",\r\n            title: \"Operation Description\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"sectionDescription\",\r\n            title: \"Section Description\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"workerName\",\r\n            title: \"Worker Name\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"cutID\",\r\n            title: \"Cut\",\r\n            disablePadding: false,\r\n        },\r\n        {\r\n            field: \"bundleID\",\r\n            title: \"Bundle\",\r\n            disablePadding: false,\r\n        },\r\n    ]);\r\n    React.useEffect(() => {\r\n        setLoading(true);\r\n        fetch(serverIP + \"/DeleteScannings/getOrdersFromProgressComplete.php\"+ \"?unitID=\" + userInfo.unitID)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        data.Orders.map((order) => {\r\n                            var colResult = {};\r\n                            var repeated = orders.filter(function (a) {\r\n                                return a.value == order.orderID;\r\n                            }).length;\r\n                            if (!repeated) {\r\n                                colResult[\"value\"] = order.orderID;\r\n                                colResult[\"label\"] = order.orderID;\r\n                                orders.push(colResult);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Orders\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n    const handleDisagreeDialogClick = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleAgreeDialogClick = () => {\r\n        setOpen(false);\r\n        if (selected_order != null && selected_operations != null) {\r\n            deleteScanningRequest(\r\n                selected_order,\r\n                selected_operations,\r\n                monthNames[new Date().getMonth()]\r\n            );\r\n        } else {\r\n            NotificationManager.error(\"Select order and operations\");\r\n        }\r\n    };\r\n    function get_operations_for_orders(order) {\r\n        operations = [];\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/DeleteScannings/getCutsForOrderFromProgressComplete.php?\" +\r\n                \"orderID=\" +\r\n                order+ \"&&unitID=\" + userInfo.unitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Operations.map((operation) => {\r\n                            var colResult = {};\r\n                            colResult[\"value\"] = operation.operationID;\r\n                            colResult[\"label\"] = operation.operationID;\r\n                            operations.push(colResult);\r\n                        });\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Operations\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function get_bundles_for_cut_order(order, cut) {\r\n        bundles = [];\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/DeleteScannings/getBundlesForOrder,CutFromProgressComplete.php?\" +\r\n                \"orderID=\" +\r\n                order +\r\n                \"&&cutID=\" +\r\n                cut\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Bundles.map((bundle) => {\r\n                            var colResult = {};\r\n                            colResult[\"value\"] = bundle.itemID;\r\n                            colResult[\"label\"] = bundle.bundleID;\r\n                            bundles.push(colResult);\r\n                        });\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Bundles\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function get_scannings_for_Operation(order, operation) {\r\n        scannings_data = [];\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/DeleteScannings/getBundleScannings.php?\" +\r\n                \"orderID=\" +\r\n                order +\r\n                \"&&operationAutoID=\" +\r\n                operation +\r\n               \"&&unitID=\" + userInfo.unitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Scannings.map((scan) => {\r\n                            scannings_data.push(\r\n                                createData(\r\n\t\t\t\t\t\t\t\t\tscan.Bundle_scan_id,\r\n                                    scan.Scanning_time,\r\n                                    scan.operationAutoID,\r\n                                    scan.operationDescription,\r\n                                    scan.operationID,\r\n                                    scan.workerID,\r\n                                    scan.workerName,\r\n                                    scan.machineID,\r\n                                    scan.machineType,\r\n                                    scan.styleID,\r\n                                    scan.lineID,\r\n                                    scan.lineDescription,\r\n                                    scan.sectionID,\r\n                                    scan.sectionDescription,\r\n                                    scan.cutID,\r\n                                    scan.bundleID\r\n                                )\r\n                            );\r\n                        });\r\n                        setRows(scannings_data);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch scannings \" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    const handleOrderDropDownChange = (event) => {\r\n        setRows([]);\r\n        if (event != null) {\r\n            selected_order = event.value;\r\n            get_operations_for_orders(event.value);\r\n        } else {\r\n            selected_order = null;\r\n        }\r\n    };\r\n    const handleOperationDropDownChange = (event) => {\r\n        setRows([]);\r\n        if(event){\r\n            if (event.length > 0) {\r\n                let selected_count = 0;\r\n                selected_operations = \"\";\r\n                event.map((operation) => {\r\n                    if (selected_count === 0) {\r\n                        selected_operations = operation.value;\r\n                    } else {\r\n                        selected_operations =\r\n                            selected_operations + \",\" + operation.value;\r\n                    }\r\n                    selected_count++;\r\n                });\r\n                get_scannings_for_Operation(selected_order, selected_operations);\r\n            } else {\r\n                setRows([]);\r\n                selected_operations = null;\r\n            }\r\n        }\r\n\r\n    };\r\n    const handleBundleDropDownChange = (event) => {\r\n        setRows([]);\r\n        if (event != null) {\r\n            selected_bundle = event.value;\r\n        } else {\r\n        }\r\n    };\r\n    const handleDeleteScanningsButtonClick = () => {\r\n        setOpen(true);\r\n    };\r\n    const deleteScanningRequest = async (order, operation, month) => {\r\n        setLoading(true);\r\n        await fetch(\r\n            serverIP +\r\n                \"DeleteScannings/deleteScannings.php?scan_ids=\" +\r\n                \"(\"+selectedRowsForDeletion.toString()+\")\",\r\n            {\r\n                method: \"POST\",\r\n            }\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No == \"0\") {\r\n                        var columnsJSON = [];\r\n                        setRows([]);\r\n                        NotificationManager.success(\r\n                            \"Scannings deleted successfully\"\r\n                        );\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to delete Scannings\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n                );\r\n            });\r\n    };\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Bundle Scannings</Typography>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid item lg={1} md={1} sm={1} xs={1}>\r\n                            <Typography\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                ORDER\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={2} md={2} sm={2} xs={2}>\r\n                            <Select\r\n                                className=\"basic-single\"\r\n                                label=\"Cut\"\r\n                                onChange={handleOrderDropDownChange}\r\n                                options={orders}\r\n                                isSearchable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your order\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={1} md={1} sm={1} xs={1}>\r\n                            <Typography\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                OperationID\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={4} md={4} sm={4} xs={4}>\r\n                            <Select\r\n                                isMulti\r\n                                label=\"Cut\"\r\n                                onChange={handleOperationDropDownChange}\r\n                                options={operations}\r\n                                isSearchable={true}\r\n                                isClearable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your Cut\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        {/* <Grid item lg={1} md={1} sm={1} xs={1}>\r\n                            <Typography\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                BUNDLE\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={2} md={2} sm={2} xs={2}>\r\n                            <Select\r\n                                className=\"basic-single\"\r\n                                label=\"Bundle\"\r\n                                options={bundles}\r\n                                isSearchable={true}\r\n                                onChange={handleBundleDropDownChange}\r\n                                isClearable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your bundle\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid> */}\r\n                        <Grid\r\n                            item\r\n                            lg={4}\r\n                            md={4}\r\n                            sm={4}\r\n                            xs={4}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        >\r\n                            {/* <CSVLink\r\n                                data={finalData}\r\n                                headers={headers}\r\n                                asyncOnClick={true}\r\n                                onClick={(event, done) => {\r\n                                    // if (generateExcel()) {\r\n                                    //     done(); // 👍🏻 Your click handling logic\r\n                                    // } else {\r\n                                    //     done(false);\r\n                                    // }\r\n                                }}\r\n                                filename={\r\n                                    \"Scannings data \" +\r\n                                    monthNames[new Date().getMonth()] +\r\n                                    \".csv\"\r\n                                }\r\n                                target=\"_blank\"\r\n                            > */}\r\n                            {/* <Fab\r\n                                    color=\"primary\"\r\n                                    aria-label=\"Next\"\r\n                                    style={{\r\n                                        marginRight: \"20px\",\r\n                                        width: \"50px\",\r\n                                        height: \"50px\",\r\n                                    }}\r\n                                >\r\n                                    <DescriptionIcon />\r\n                                </Fab>\r\n                            </CSVLink> */}\r\n{/*\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={handleDeleteScanningsButtonClick}\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                }}\r\n                            >\r\n                                Delete Scannings\r\n                            </Button> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                <Dialog\r\n                    fullScreen={fullScreen}\r\n                    open={open}\r\n                    aria-labelledby=\"responsive-dialog-title\"\r\n                >\r\n                    <DialogTitle id=\"responsive-dialog-title\">\r\n                        {\"Proceed with scanning transfer?\"}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Are you sure you want to procceed with delete\r\n                            scannings ?.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            autoFocus\r\n                            onClick={handleDisagreeDialogClick}\r\n                            color=\"primary\"\r\n                        >\r\n                            Disagree\r\n                        </Button>\r\n                        <Button\r\n                            onClick={handleAgreeDialogClick}\r\n                            color=\"primary\"\r\n                            autoFocus\r\n                        >\r\n                            Agree\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <DataTable\r\n                                    headCells={headCells}\r\n                                    Rows={rows}\r\n\t\t\t\t\t\t\t\t\tselectedRowsForDeletion={selectedRowsForDeletion}\r\n\t\t\t\t\t\t\t\t\tsetSelectedRowsForDeletion={setSelectedRowsForDeletion}\r\n\t\t\t\t\t\t\t\t\thandleDeleteScanningsButtonClick={handleDeleteScanningsButtonClick}\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeleteScannings;\r\n","import React from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport default function MaterialTableDemo(props) {\r\n    const [state, setState] = React.useState({\r\n        columns: props.headCells,\r\n    });\r\n    const [data, setData] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setData(props.Rows);\r\n    }, [props.Rows]);\r\n\r\n    React.useEffect(() => {}, []);\r\n    return (\r\n        <MaterialTable\r\n            title={\"Style Bulletin\"}\r\n            columns={state.columns}\r\n            data={data}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            props.UpdatePieceRate(\r\n                                newData.styleID,\r\n                                newData.pieceRate,\r\n                                newData.SMV,\r\n                                newData,\r\n                                oldData\r\n                            );\r\n                        }, 600);\r\n                    }),\r\n\r\n                    onRowDelete: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            props.DeleteOperation(\r\n                                newData.styleID,\r\n                                newData,\r\n                                oldData\r\n                            );\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { connect, ReactReduxContext } from \"react-redux\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport { serverIP } from \"../../../util/Constants\";\r\nimport MaterialTableDemo from \"../../../components/RateAdjustment/RateAdjustmentTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(\r\n    orderID,\r\n    styleID,\r\n    Major_operation_description,\r\n    operationID,\r\n    SMV,\r\n    operationSequence,\r\n    sectionDescription,\r\n    pieceRate,\r\n\tSL\r\n) {\r\n    return {\r\n        orderID,\r\n        styleID,\r\n        Major_operation_description,\r\n        operationID,\r\n        SMV,\r\n        operationSequence,\r\n        sectionDescription,\r\n        pieceRate,\r\n\t\tSL\r\n    };\r\n}\r\nlet orders = [];\r\nlet selected_order = null;\r\nlet data = [];\r\n\r\nlet pieceRateSum = 0,\r\n    SMVSum = 0;\r\n\r\nconst RateAdjustment = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"orderID\",\r\n            title: \"Order ID\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"operationID\",\r\n            title: \"Major Operation ID\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"Major_operation_description\",\r\n            title: \"Major Operation\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"SMV\",\r\n            title: \"SMV\",\r\n        },\r\n        {\r\n            field: \"operationSequence\",\r\n            title: \"Operation Sequence\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"sectionDescription\",\r\n            title: \"Section\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"pieceRate\",\r\n            title: \"Piece Rate\",\r\n        },\r\n        {\r\n            field: \"SL\",\r\n            title: \"SL\",\r\n        }\r\n    ]);\r\n\r\n    React.useEffect(() => {\r\n        setLoading(true);\r\n        pieceRateSum = 0;\r\n        SMVSum = 0;\r\n\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(\r\n            serverIP +\r\n                \"/StyleBulletin/StyleBulletinUpdate/getOrdersFromStyleBulletin.php\" +\r\n                \"?unitID=\" +\r\n                userInfo.unitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Orders.map((order) => {\r\n                            var colResult = {};\r\n                            var repeated = orders.filter(function (a) {\r\n                                return a.value == order.orderID;\r\n                            }).length;\r\n                            if (!repeated) {\r\n                                colResult[\"value\"] = order.orderID;\r\n                                colResult[\"label\"] = order.orderID;\r\n                                orders.push(colResult);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Orders\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n    function update_piece_rate(styleID, pieceRate,smv, newData, oldData) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/StyleBulletin/StyleBulletinUpdate/updatePieceRateForStyle.php?\" +\r\n                \"styleID=\" +\r\n                styleID +\r\n                \"&&rate=\" +\r\n                pieceRate +\r\n                \"&&smv=\" +\r\n                smv\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Stylebulletin updated successfully\"\r\n                        );\r\n                        let temp = [...rows];\r\n                        temp[temp.indexOf(oldData)] = newData;\r\n\r\n                        pieceRateSum = temp.reduce((sum, current) => sum += parseFloat(current.pieceRate), 0);\r\n                        SMVSum = temp.reduce((sum, current) => sum += parseFloat(current.SMV), 0);\r\n\r\n                        setRows(temp);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to update Stylebulletin\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function delete_operation(styleID,newData, oldData) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/StyleBulletin/StyleBulletinUpdate/deleteOperationFromStyle.php?\" +\r\n                \"styleID=\" +\r\n                styleID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Operation deleted successfully\"\r\n                        );\r\n                    let temp = [...rows];\r\n                     temp = temp.filter(function (el) {\r\n                        return el.styleID != styleID;\r\n                      });\r\n                    setRows(temp);\r\n                    setLoading(false);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to delete operation from Stylebulletin\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function get_style_bulletin_for_order(order) {\r\n        let style_bulletin = [];\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                \"/StyleBulletin/StyleBulletinUpdate/getStyleBulletinForOrder.php?\" +\r\n                \"orderID=\" +\r\n                order\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Style_bulletin.map((style) => {\r\n                            style_bulletin.push(\r\n                                createData(\r\n                                    style.orderID,\r\n                                    style.styleID,\r\n                                    style.Major_operation_description,\r\n                                    style.Operation_code,\r\n                                    style.SMV,\r\n                                    style.operationSequence,\r\n                                    style.sectionDescription,\r\n                                    style.pieceRate,\r\n\t\t\t\t\t\t\t\t\tstyle.SL\r\n                                )\r\n                            );\r\n                        });\r\n\r\n                        pieceRateSum = style_bulletin.reduce((sum, current) => sum += parseFloat(current.pieceRate), 0);\r\n                        SMVSum = style_bulletin.reduce((sum, current) => sum += parseFloat(current.SMV), 0);\r\n\r\n                        setRows(style_bulletin);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Style Bulletin\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    const handleOrderDropDownChange = (event) => {\r\n        setRows([]);\r\n        SMVSum = 0;\r\n        pieceRateSum = 0;\r\n\r\n        if (event != null) {\r\n            selected_order = event.value;\r\n            get_style_bulletin_for_order(selected_order);\r\n        } else {\r\n            selected_order = null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">View Style Bulletin</Typography>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid item lg={1} md={1} sm={1} xs={1}>\r\n                            <Typography\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                }}\r\n                                variant=\"subtitle2\"\r\n                            >\r\n                                ORDER\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={2} md={2} sm={2} xs={2}>\r\n                            <Select\r\n                                className=\"basic-single\"\r\n                                label=\"Cut\"\r\n                                onChange={handleOrderDropDownChange}\r\n                                options={orders}\r\n                                isSearchable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your order\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        {pieceRateSum !== 0 &&\r\n                            <Grid\r\n                                item xs={2}\r\n                                style={{marginLeft: 'auto'}}\r\n                            >\r\n                                <Typography\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        marginTop: \"10px\",\r\n                                    }}\r\n                                    variant=\"subtitle2\"\r\n                                >\r\n                                    Total Piece Rate: {pieceRateSum.toPrecision(4)}\r\n                                </Typography>\r\n                            </Grid>\r\n                        }\r\n                        {SMVSum !== 0 &&\r\n                            <Grid item xs={2}>\r\n                                <Typography\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        marginTop: \"10px\",\r\n                                    }}\r\n                                    variant=\"subtitle2\"\r\n                                >\r\n                                    Total SMV: {SMVSum.toPrecision(4)}\r\n                                </Typography>\r\n                            </Grid>\r\n                        }\r\n\r\n                        {/* <Grid\r\n                            item\r\n                            lg={5}\r\n                            md={5}\r\n                            sm={5}\r\n                            xs={5}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                }}\r\n                            >\r\n                                Transfer Scannings\r\n                            </Button>\r\n                        </Grid> */}\r\n                    </Grid>\r\n                </Paper>\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTableDemo\r\n                                    style={{\r\n                                        padding: \"15px\",\r\n                                    }}\r\n                                    headCells={headCells}\r\n                                    Rows={rows}\r\n                                    UpdatePieceRate={update_piece_rate}\r\n                                    DeleteOperation={delete_operation}\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RateAdjustment;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n    const [open, setOpen] = React.useState(props.status);\r\n    const [rows, setRows] = React.useState(props.data);\r\n    console.log(props);\r\n    const handleClickOpen = () => {\r\n        props.setDialogOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        props.setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                fullWidth={\"lg\"}\r\n                open={props.status}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Upload Status\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Order ID</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Operation ID\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        operation Auto ID\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">SMV</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Piece Rate\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.data.map((row) => (\r\n                                    <TableRow key={row.order}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.Order}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.operationID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.operationAutoID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.SMV}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Piece_Rate}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Error_Description}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Okay\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles({\r\n\ttable: {\r\n\t\tminWidth: 650,\r\n\t},\r\n});\r\n\r\nexport default function SimpleTable(props) {\r\n\tconst classes = useStyles();\r\n\tconst rows = props.data;\r\n\tlet [totalSMV, setTotalSMV] = React.useState(0);\r\n\tlet [totalPieceRate, setTotalPieceRate] = React.useState(0);\r\n\r\n\tlet [operations, setOperations] = React.useState(props.operations);\r\n\r\n\tconst handleOperationChange = (event, row) => {\r\n\t\tif (row.majorOperation === \"\") {\r\n\t\t\trow.majorOperation = event;\r\n\t\t} else {\r\n\t\t\tlet temp = operations;\r\n\t\t\ttemp.push(row.majorOperation);\r\n\t\t\tconsole.log(row.majorOperation);\r\n\t\t\tsetOperations(temp);\r\n\t\t\trow.majorOperation = event;\r\n\t\t}\r\n\r\n\t\tsetOperations(\r\n\t\t\toperations.filter(function(a) {\r\n\t\t\t\treturn a.value !== event.value;\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\tReact.useEffect(() => {\r\n\t\tlet smv = 0;\r\n\t\tlet pieceRate = 0;\r\n\r\n\t\tif (rows) {\r\n\t\t\trows.map((item) => {\r\n\t\t\t\tsmv = parseFloat(item.SMV) + parseFloat(smv);\r\n\t\t\t\tpieceRate = parseFloat(item.pieceRate) + parseFloat(pieceRate);\r\n\t\t\t});\r\n\t\t\tsetTotalPieceRate(parseFloat(pieceRate).toFixed(2));\r\n\t\t\tsetTotalSMV(parseFloat(smv).toFixed(2));\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Table className={classes.table} aria-label=\"simple table\">\r\n\t\t\t<TableHead>\r\n\t\t\t\t<TableRow>\r\n\t\t\t\t\t<TableCell>Order ID</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Minor Operation ID</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Minor Operation Code</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">SMV</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Piece Rate</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Section ID</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Section Name</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Operation Sequence</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">SL</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Major </TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">Operation</TableCell>\r\n\r\n\t\t\t\t</TableRow>\r\n\t\t\t</TableHead>\r\n\t\t\t<TableBody>\r\n\t\t\t\t{rows.map((row) => (\r\n\t\t\t\t\t<TableRow key={row.OC}>\r\n\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t{row.OC}\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.OP}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.OP_NAME}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.SMV}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.pieceRate}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.SECTION_ID}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.SECTION_NAME}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.OP_SEQ}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"center\">{row.SL}</TableCell>\r\n\t\t\t\t\t\t<TableCell colSpan={2} align=\"center\">\r\n\t\t\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tclassName=\"basic-single\"\r\n\t\t\t\t\t\t\t\tlabel=\"Cut\"\r\n\t\t\t\t\t\t\t\toptions={operations}\r\n\t\t\t\t\t\t\t\tcomponent={Paper}\r\n\t\t\t\t\t\t\t\tisSearchable={true}\r\n\t\t\t\t\t\t\t\tonChange={(e) => handleOperationChange(e, row)}\r\n\t\t\t\t\t\t\t\tcomponents={animatedComponents}\r\n\t\t\t\t\t\t\t\thelperText=\"Please select your operation\"\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t))}\r\n\t\t\t\t<TableRow>\r\n\t\t\t\t\t<TableCell colSpan={3} align=\"center\">\r\n\t\t\t\t\t\tTOTAL\r\n                    </TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">{totalSMV}</TableCell>\r\n\t\t\t\t\t<TableCell align=\"center\">{totalPieceRate}</TableCell>\r\n\t\t\t\t\t<TableCell colSpan={5} align=\"center\"></TableCell>\r\n\t\t\t\t</TableRow>\r\n\t\t\t</TableBody>\r\n\t\t</Table>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { connect, ReactReduxContext } from \"react-redux\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport {\r\n\tserverIP,\r\n\tgetAllOperations,\r\n\tgetStyleBulletin,\r\n\tuploadStyleBulletin,\r\n\tgetOrdersForStyleBulletinFromOracle,\r\n} from \"../../../util/Constants\";\r\nimport Dialog from \"../../../components/StatusDialog/styleBulletinStatusDialog\";\r\nimport AssignOperationTable from \"../../../components/AssignOperationsTable/AssignOperationTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n\tfield: {\r\n\t\t//width: '200px'\r\n\t},\r\n\tgreenAvatar: {\r\n\t\tmarginRight: \"10px\",\r\n\t\tcolor: \"#fff\",\r\n\t\tbackgroundColor: green[500],\r\n\t},\r\n\troot: {\r\n\t\twidth: \"100%\",\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tposition: \"relative\",\r\n\t\toverflow: \"auto\",\r\n\t\tmaxHeight: \"850px\",\r\n\t},\r\n\tcolumnPaper: {\r\n\t\tdisplay: \"grid\",\r\n\t\tgridTemplateColumns: \"25% 25% 25% 25%\",\r\n\t\tpadding: \"5px\",\r\n\t\tmargin: \"10px 5px\",\r\n\t},\r\n}));\r\n\r\nfunction createData(\r\n\tOC,\r\n\tOP,\r\n\tOP_NAME,\r\n\tSMV,\r\n\tpieceRate,\r\n\tmajorOperation,\r\n\tSECTION_ID,\r\n\tSECTION_NAME,\r\n\tOP_SEQ,\r\n\tSL\r\n) {\r\n\treturn {\r\n\t\tOC,\r\n\t\tOP,\r\n\t\tOP_NAME,\r\n\t\tSMV,\r\n\t\tpieceRate,\r\n\t\tmajorOperation,\r\n\t\tSECTION_ID,\r\n\t\tSECTION_NAME,\r\n\t\tOP_SEQ,\r\n\t\tSL\r\n\t};\r\n}\r\n\r\nlet orders = [];\r\nlet operations = [];\r\nlet selected_order = null;\r\n\r\nlet pieceRateSum = 0,\r\n\tSMVSum = 0;\r\n\r\nconst UploadStyleBulletin = (props) => {\r\n\r\n\tconst classes = useStyles();\r\n\tconst [Loading, setLoading] = React.useState(false);\r\n\tlet [rows, setRows] = React.useState([]);\r\n\tlet [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n\tlet [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n\tconst [headCells, setHeadCells] = React.useState([\r\n\t\t{\r\n\t\t\tfield: \"orderID\",\r\n\t\t\ttitle: \"Order ID\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"operationID\",\r\n\t\t\ttitle: \"Major Operation ID\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"Major_operation_description\",\r\n\t\t\ttitle: \"Major Operation\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"SMV\",\r\n\t\t\ttitle: \"SMV\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"pieceRate\",\r\n\t\t\ttitle: \"Piece Rate\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"SECTION_ID\",\r\n\t\t\ttitle: \"Section ID\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"SECTION_NAME\",\r\n\t\t\ttitle: \"Section Name\",\r\n\t\t},\r\n\t]);\r\n\tReact.useEffect(() => {\r\n\t\tpieceRateSum = 0;\r\n\t\tSMVSum = 0;\r\n\t\tget_orders();\r\n\t}, []);\r\n\tfunction get_orders() {\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\tgetOrdersForStyleBulletinFromOracle +\r\n\t\t\t\"?unitID=\" +\r\n\t\t\tuserInfo.UsUnitID\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tdata.Orders.map((order) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tvar repeated = orders.filter(function(a) {\r\n\t\t\t\t\t\t\t\treturn a.value == order.orderID;\r\n\t\t\t\t\t\t\t}).length;\r\n\t\t\t\t\t\t\tif (!repeated) {\r\n\t\t\t\t\t\t\t\tcolResult[\"value\"] = order.orderID;\r\n\t\t\t\t\t\t\t\tcolResult[\"label\"] = order.orderID;\r\n\t\t\t\t\t\t\t\torders.push(colResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tget_operations();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Orders\" + data.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction handleUploadStyleBulletinClick() {\r\n\t\tvar temp_rows = rows;\r\n\t\tconsole.log(rows);\r\n\t\tfor (let x = 0; x < temp_rows.length; x++) {\r\n\t\t\tif (temp_rows[x].majorOperation !== \"\") {\r\n\t\t\t\ttemp_rows[x].majorOperationID = rows[x].majorOperation.value;\r\n\t\t\t\ttemp_rows[x].majorOperationName = rows[x].majorOperation.label;\r\n\t\t\t} else {\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"You have't selected major operations for all operations\"\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tupload_style_bulletin(temp_rows);\r\n\t}\r\n\r\n\tasync function upload_style_bulletin(data) {\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tawait fetch(serverIP + uploadStyleBulletin, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\torders: data,\r\n\t\t\t\tunitID: userInfo.unitID,\r\n\t\t\t}),\r\n\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === \"0\") {\r\n\t\t\t\t\t\tsetRows(\"\");\r\n\t\t\t\t\t\tSMVSum = 0;\r\n\t\t\t\t\t\tpieceRateSum = 0;\r\n\r\n\t\t\t\t\t\tsetuploadedDataResponse(data.Responses);\r\n\t\t\t\t\t\tsetresponseDialogOpen(true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to upload style bulletin\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tsetuploadedDataResponse(data.Responses);\r\n\t\t\t\t\t\tsetresponseDialogOpen(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction get_operations() {\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tfetch(serverIP + getAllOperations + \"?unitID=\" + userInfo.unitID)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tconsole.log(data.Operations);\r\n\t\t\t\t\t\tdata.Operations.map((operation) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tvar repeated = operations.filter(function(a) {\r\n\t\t\t\t\t\t\t\treturn a.value == operation.operationID;\r\n\t\t\t\t\t\t\t}).length;\r\n\t\t\t\t\t\t\tif (!repeated) {\r\n\t\t\t\t\t\t\t\tcolResult[\"value\"] = operation.operationID;\r\n\t\t\t\t\t\t\t\tcolResult[\"label\"] =\r\n\t\t\t\t\t\t\t\t\toperation.operationCode +\r\n\t\t\t\t\t\t\t\t\t\" - \" +\r\n\t\t\t\t\t\t\t\t\toperation.operationDescription;\r\n\t\t\t\t\t\t\t\tcolResult[\"operationID\"] =\r\n\t\t\t\t\t\t\t\t\toperation.operationID;\r\n\t\t\t\t\t\t\t\toperations.push(colResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Operations \" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction get_style_bulletin_for_order(order) {\r\n\t\tlet style_bulletin = [];\r\n\t\tsetLoading(true);\r\n\t\tfetch(serverIP + getStyleBulletin + \"?\" + \"orderID=\" + order)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tif (data.Style_bulletin) {\r\n\t\t\t\t\t\t\tdata.Style_bulletin.map((style) => {\r\n\t\t\t\t\t\t\t\tstyle_bulletin.push(\r\n\t\t\t\t\t\t\t\t\tcreateData(\r\n\t\t\t\t\t\t\t\t\t\tstyle.OC,\r\n\t\t\t\t\t\t\t\t\t\tstyle.OP_NO,\r\n\t\t\t\t\t\t\t\t\t\tstyle.OPERATION_NAME,\r\n\t\t\t\t\t\t\t\t\t\tstyle.SMV,\r\n\t\t\t\t\t\t\t\t\t\tstyle.RATE,\r\n\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\tstyle.SECTION_ID,\r\n\t\t\t\t\t\t\t\t\t\tstyle.SECTION_NAME,\r\n\t\t\t\t\t\t\t\t\t\tstyle.OP_SEQ,\r\n\t\t\t\t\t\t\t\t\t\tstyle.SL\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tpieceRateSum = style_bulletin.reduce((sum, current) => sum += parseFloat(current.pieceRate), 0);\r\n\t\t\t\t\t\t\tSMVSum = style_bulletin.reduce((sum, current) => sum += parseFloat(current.SMV), 0);\r\n\r\n\t\t\t\t\t\t\tsetRows(style_bulletin);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\t\"No data available for uploading\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Style Bulletin\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tconst handleOrderDropDownChange = (event) => {\r\n\t\tsetRows([]);\r\n\t\tSMVSum = 0;\r\n\t\tpieceRateSum = 0;\r\n\r\n\t\tif (event != null) {\r\n\t\t\tselected_order = event.value;\r\n\t\t\tget_style_bulletin_for_order(selected_order);\r\n\t\t} else {\r\n\t\t\tselected_order = null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tpadding: \"0px 0px 15px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\tAssign Major Operations & Upload Style Bulletin\r\n                    </Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\tdata={uploadedDataResponse}\r\n\t\t\t\t\tstatus={responseDialogOpen}\r\n\t\t\t\t\tsetDialogOpen={setresponseDialogOpen}\r\n\t\t\t\t/>\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tORDER\r\n                            </Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={2} md={2} sm={2} xs={2}>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tclassName=\"basic-single\"\r\n\t\t\t\t\t\t\t\tlabel=\"Cut\"\r\n\t\t\t\t\t\t\t\tonChange={handleOrderDropDownChange}\r\n\t\t\t\t\t\t\t\toptions={orders}\r\n\t\t\t\t\t\t\t\tisSearchable={true}\r\n\t\t\t\t\t\t\t\tcomponents={animatedComponents}\r\n\t\t\t\t\t\t\t\thelperText=\"Please select your order\"\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{pieceRateSum !== 0 &&\r\n\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\titem xs={2}\r\n\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'auto' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tTotal Piece Rate: {pieceRateSum.toPrecision(4)}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{SMVSum !== 0 &&\r\n\t\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tTotal SMV: {SMVSum.toPrecision(4)}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\txs={3}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: \"0px 5px\",\r\n\t\t\t\t\t\t\t\ttextAlign: \"right\",\r\n\t\t\t\t\t\t\t\tmarginLeft: \"auto\"\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={handleUploadStyleBulletinClick}\r\n\t\t\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: \"50px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tUpload Style Bulletin\r\n                            </Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\titem\r\n\t\t\t\t\t\tlg={12}\r\n\t\t\t\t\t\tmd={12}\r\n\t\t\t\t\t\tsm={12}\r\n\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tpadding: \"15px\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{rows.length > 0 && (\r\n\t\t\t\t\t\t\t<AssignOperationTable\r\n\t\t\t\t\t\t\t\tdata={rows}\r\n\t\t\t\t\t\t\t\toperations={operations}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</LoadingOverlay>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UploadStyleBulletin;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n    const [open, setOpen] = React.useState(props.status);\r\n    const [rows, setRows] = React.useState(props.data);\r\n    console.log(props);\r\n    const handleClickOpen = () => {\r\n        props.setDialogOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        props.setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                fullWidth={\"lg\"}\r\n                open={props.status}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Upload Status\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Order ID</TableCell>\r\n                                    <TableCell align=\"center\">Cut</TableCell>\r\n                                    <TableCell align=\"center\">Bundle</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Quantity\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">Size</TableCell>\r\n                                    <TableCell align=\"center\">Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.data.map((row) => (\r\n                                    <TableRow key={row.order}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.order}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.cutID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.bundleID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.quantity}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.size}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Error_Description}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Okay\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { connect, ReactReduxContext } from \"react-redux\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport OrderTransferItem from \"../../../components/orderTransfer/orderTransferListItem/orderTransferItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport MaterialTable from \"material-table\";\r\nimport {\r\n\tserverIP,\r\n\tgetOrdersFromOracle,\r\n\tgetCutReportFromOracleForOrder,\r\n\tuploadCutReport,\r\n} from \"../../../util/Constants\";\r\nimport Dialog from \"../../../components/StatusDialog/statusDialog\";\r\nimport AssignOperationTable from \"../../../components/AssignOperationsTable/AssignOperationTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n\tfield: {\r\n\t\t//width: '200px'\r\n\t},\r\n\tgreenAvatar: {\r\n\t\tmarginRight: \"10px\",\r\n\t\tcolor: \"#fff\",\r\n\t\tbackgroundColor: green[500],\r\n\t},\r\n\troot: {\r\n\t\twidth: \"100%\",\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tposition: \"relative\",\r\n\t\toverflow: \"auto\",\r\n\t\tmaxHeight: \"850px\",\r\n\t},\r\n\tcolumnPaper: {\r\n\t\tdisplay: \"grid\",\r\n\t\tgridTemplateColumns: \"25% 25% 25% 25%\",\r\n\t\tpadding: \"5px\",\r\n\t\tmargin: \"10px 5px\",\r\n\t},\r\n}));\r\n\r\nfunction createData(orderID, cutID, bundleID, quantity, size, special_process) {\r\n\treturn {\r\n\t\torderID,\r\n\t\tcutID,\r\n\t\tbundleID,\r\n\t\tquantity,\r\n\t\tsize,\r\n\t\tspecial_process\r\n\t};\r\n}\r\n\r\nlet orders = [];\r\nlet selected_order = null;\r\nlet quantitySum = 0;\r\n\r\nconst UploadCutReport = (props) => {\r\n\tconst classes = useStyles();\r\n\tconst [Loading, setLoading] = React.useState(false);\r\n\tlet [rows, setRows] = React.useState([]);\r\n\tlet [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n\tlet [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n\tconst [headCells, setHeadCells] = React.useState([\r\n\t\t{\r\n\t\t\tfield: \"orderID\",\r\n\t\t\ttitle: \"Order ID\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"cutID\",\r\n\t\t\ttitle: \"Cut ID\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"bundleID\",\r\n\t\t\ttitle: \"Bundle ID\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"quantity\",\r\n\t\t\ttitle: \"Quantity\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"size\",\r\n\t\t\ttitle: \"Size\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"special_process\",\r\n\t\t\ttitle: \"Special process\",\r\n\t\t\teditable: false,\r\n\t\t},\r\n\t]);\r\n\tReact.useEffect(() => {\r\n\t\tquantitySum = 0;\r\n\t\tget_orders();\r\n\t}, []);\r\n\tfunction get_orders() {\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tfetch(serverIP + getOrdersFromOracle + \"?unitID=\" + userInfo.UsUnitID)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tdata.Orders.map((order) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tvar repeated = orders.filter(function(a) {\r\n\t\t\t\t\t\t\t\treturn a.value === order.orderID;\r\n\t\t\t\t\t\t\t}).length;\r\n\t\t\t\t\t\t\tif (!repeated) {\r\n\t\t\t\t\t\t\t\tcolResult[\"value\"] = order.orderID;\r\n\t\t\t\t\t\t\t\tcolResult[\"label\"] = order.orderID;\r\n\t\t\t\t\t\t\t\tcolResult[\"orderQty\"] = order.orderQty;\r\n\t\t\t\t\t\t\t\tcolResult[\"unitSellingPrice\"] = order.unitSellingPrice;\r\n\t\t\t\t\t\t\t\tcolResult[\"loopOrder\"] = order.loopOrder;\r\n\t\t\t\t\t\t\t\tcolResult[\"color\"] = order.color;\r\n\t\t\t\t\t\t\t\torders.push(colResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Orders from Oracle\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tfunction handleUploadStyleBulletinClick() {\r\n\t\tif (rows.length > 0) {\r\n\t\t\tupload_cut_report(rows);\r\n\t\t} else {\r\n\t\t}\r\n\t}\r\n\tasync function upload_cut_report(data) {\r\n\t\tsetLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tawait fetch(serverIP + uploadCutReport, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\torders: data,\r\n\t\t\t\tunitID: userInfo.unitID,\r\n\t\t\t\torderInfo: selected_order,\r\n\t\t\t}),\r\n\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === \"0\") {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tNotificationManager.success(\r\n\t\t\t\t\t\t\t\"Cut Report has been uploaded\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tquantitySum = 0;\r\n\t\t\t\t\t\tsetRows(\"\");\r\n\t\t\t\t\t\tsetuploadedDataResponse(data.Responses);\r\n\t\t\t\t\t\tsetresponseDialogOpen(true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to upload CutReport\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tsetuploadedDataResponse(data.Responses);\r\n\t\t\t\t\t\tsetresponseDialogOpen(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\tfunction get_cut_report_for_order(order) {\r\n\t\tlet cut_report = [];\r\n\t\tsetLoading(true);\r\n\t\tfetch(\r\n\t\t\tserverIP + getCutReportFromOracleForOrder + \"?\" + \"orderID=\" + order\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tif (data.Cut_Report) {\r\n\t\t\t\t\t\t\tdata.Cut_Report.map((item) => {\r\n\t\t\t\t\t\t\t\tcut_report.push(\r\n\t\t\t\t\t\t\t\t\tcreateData(\r\n\t\t\t\t\t\t\t\t\t\titem.orderID,\r\n\t\t\t\t\t\t\t\t\t\titem.cutID,\r\n\t\t\t\t\t\t\t\t\t\titem.bundleID,\r\n\t\t\t\t\t\t\t\t\t\titem.quantity,\r\n\t\t\t\t\t\t\t\t\t\titem.size,\r\n\t\t\t\t\t\t\t\t\t\titem.special_process\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tquantitySum = cut_report.reduce((sum, current) => sum += parseInt(current.quantity), 0);\r\n\r\n\t\t\t\t\t\t\tsetRows(cut_report);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\t\"Cut Report not found  in ERP for this Order\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Cut Report\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tconst handleOrderDropDownChange = (order) => {\r\n\t\tquantitySum = 0;\r\n\t\tsetRows([]);\r\n\t\tif (order != null) {\r\n\t\t\tselected_order = order;\r\n\t\t\tget_cut_report_for_order(selected_order.label);\r\n\t\t} else {\r\n\t\t\tselected_order = null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tpadding: \"0px 0px 15px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography variant=\"h5\">Upload Cut Report</Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\tdata={uploadedDataResponse}\r\n\t\t\t\t\tstatus={responseDialogOpen}\r\n\t\t\t\t\tsetDialogOpen={setresponseDialogOpen}\r\n\t\t\t\t/>\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={3} md={3} sm={3} xs={3}>\r\n\t\t\t\t\t\t\t{/* <Select\r\n                                className=\"basic-single\"\r\n                                label=\"Cut\"\r\n                                onChange={handleOrderDropDownChange}\r\n                                options={orders}\r\n                                isSearchable={true}\r\n                                components={animatedComponents}\r\n                                helperText=\"Please select your order\"\r\n                                variant=\"outlined\"\r\n                            /> */}\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\toptions={orders}\r\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.label}\r\n\t\t\t\t\t\t\t\tstyle={{ width: \"90%\" }}\r\n\t\t\t\t\t\t\t\tonChange={(e, option) => {\r\n\t\t\t\t\t\t\t\t\tif (option) {\r\n\t\t\t\t\t\t\t\t\t\thandleOrderDropDownChange(option);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\thandleOrderDropDownChange(null);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) => (\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\t{...params}\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Order\"\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{quantitySum !== 0 &&\r\n\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\txs={2}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tmarginLeft: 'auto'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tTotal Quantity: {quantitySum}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\txs={3}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: \"0px 5px\",\r\n\t\t\t\t\t\t\t\tmarginLeft: \"auto\",\r\n\t\t\t\t\t\t\t\ttextAlign: \"left\"\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={handleUploadStyleBulletinClick}\r\n\t\t\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: \"50px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tUpload Cut Report\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t\t<Paper\r\n\t\t\t\t\tclassName={classes.paper}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: \"#900C3E\",\r\n\t\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\t\tpadding: \"5px\",\r\n\t\t\t\t\t\tmargin: \"10px 10px 10px 10px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\tlg={12}\r\n\t\t\t\t\t\t\tmd={12}\r\n\t\t\t\t\t\t\tsm={12}\r\n\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: \"15px\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{rows.length > 0 && (\r\n\t\t\t\t\t\t\t\t<MaterialTable\r\n\t\t\t\t\t\t\t\t\tcomponent={Paper}\r\n\t\t\t\t\t\t\t\t\tstyle={{ padding: \"15px\" }}\r\n\t\t\t\t\t\t\t\t\ttitle={\"\"}\r\n\t\t\t\t\t\t\t\t\tcolumns={headCells}\r\n\t\t\t\t\t\t\t\t\tdata={rows}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t</LoadingOverlay>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UploadCutReport;\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport {\r\n    serverIP,\r\n    getAllMachines,\r\n    updateMachineInfo,\r\n} from \"../../util/Constants\";\r\nimport MaterialTableDemo from \"../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\n\r\nconst Machines = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"macID\",\r\n            title: \"Machine Code\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"machineType\",\r\n            title: \"Machine Type\",\r\n        },\r\n\t\t{\r\n            field: \"headNo\",\r\n            title: \"Head No\",\r\n        },\r\n    ]);\r\n    React.useEffect(() => {\r\n        get_all_machines();\r\n    }, []);\r\n\r\n    function get_all_machines() {\r\n        setRows([]);\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(serverIP + getAllMachines + \"?unitID=\" + userInfo.unitID)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        setRows(data.Machines);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Machines \" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function update_bundle_quantity(itemID, quantity, newData, oldData) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                updateMachineInfo +\r\n                \"?\" +\r\n                \"machineID=\" +\r\n                oldData.machineID +\r\n                \"&&macID=\" +\r\n                newData.macID +\r\n                \"&&machineType=\" +\r\n                newData.machineType +\r\n\t\t\t\t\"&&headNo=\" +\r\n                newData.headNo\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Machine updated successfully\"\r\n                        );\r\n                        let temp = [...rows];\r\n                        temp[temp.indexOf(oldData)] = newData;\r\n                        setRows(temp);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to update Machine\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Machines</Typography>\r\n                </div>\r\n\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTableDemo\r\n                                    headCells={headCells}\r\n                                    Rows={rows}\r\n                                    UpdateQuantityFunction={\r\n                                        update_bundle_quantity\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Machines;\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport {\r\n    serverIP,\r\n    getAllOperations,\r\n    updateOperationInfo,\r\n} from \"../../util/Constants\";\r\nimport MaterialTableDemo from \"../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(\r\n    operationID,\r\n    operationCode,\r\n    operationDescription,\r\n    sectionDescription\r\n) {\r\n    return {\r\n        operationID,\r\n        operationCode,\r\n        operationDescription,\r\n        sectionDescription,\r\n    };\r\n}\r\nlet operations = [];\r\nconst Operation = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"operationID\",\r\n            title: \"Operation ID\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"operationCode\",\r\n            title: \"Operation Code\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"operationDescription\",\r\n            title: \"Operation Description\",\r\n        },\r\n        {\r\n            field: \"sectionDescription\",\r\n            title: \"Section Description\",\r\n            editable: false,\r\n        },\r\n    ]);\r\n    React.useEffect(() => {\r\n        get_all_operations();\r\n    }, []);\r\n\r\n    function get_all_operations() {\r\n        setRows([]);\r\n        operations = [];\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(serverIP + getAllOperations + \"?unitID=\" + userInfo.unitID)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        console.log(data.Operations);\r\n                        data.Operations.map((operation) => {\r\n                            operations.push(\r\n                                createData(\r\n                                    operation.operationID,\r\n                                    operation.operationCode,\r\n                                    operation.operationDescription,\r\n                                    operation.sectionDescription\r\n                                )\r\n                            );\r\n                        });\r\n                        setRows(operations);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Operations \" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function update_bundle_quantity(itemID, quantity, newData, oldData) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                updateOperationInfo +\r\n                \"?\" +\r\n                \"operationID=\" +\r\n                oldData.operationID +\r\n                \"&&operationDescription=\" +\r\n                newData.operationDescription\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Operation updated successfully\"\r\n                        );\r\n                        let temp = [...rows];\r\n                        temp[temp.indexOf(oldData)] = newData;\r\n                        setRows(temp);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to update Operation\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Operations</Typography>\r\n                </div>\r\n\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTableDemo\r\n                                    headCells={headCells}\r\n                                    Rows={rows}\r\n                                    UpdateQuantityFunction={\r\n                                        update_bundle_quantity\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Operation;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n    const [open, setOpen] = React.useState(props.status);\r\n    const [rows, setRows] = React.useState(props.data);\r\n    console.log(props);\r\n    const handleClickOpen = () => {\r\n        props.setDialogOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        props.setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                fullWidth={\"lg\"}\r\n                open={props.status}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Upload Status\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Operation ID</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Operation Code\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.data.map((row) => (\r\n                                    <TableRow key={row.operationID}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.operationID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.operationCode}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Error_Description}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Okay\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport MaterialTable from \"material-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n    serverIP,\r\n    getAllOperationsFromOracle,\r\n    uploadOperations,\r\n    getAllUnits,\r\n    getAllSections,\r\n    updateOperationInfo,\r\n} from \"../../../util/Constants\";\r\nimport Dialog from \"../../../components/StatusDialog/operationStatusDialog\";\r\nimport MaterialTableDemo from \"../../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(operationID, operationCode) {\r\n    return { operationID, operationCode };\r\n}\r\nlet operations = [];\r\nconst AddOperationPage = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    const [state, setState] = React.useState({});\r\n    let [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n    let [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n    const [units, setUnits] = React.useState([]);\r\n    const [sections, setSections] = React.useState([]);\r\n    React.useEffect(() => {\r\n        get_all_units();\r\n        get_all_sections();\r\n    }, []);\r\n\r\n    function get_all_units() {\r\n        setRows([]);\r\n        setLoading(true);\r\n        fetch(serverIP + getAllUnits)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        if (data.UNITS) {\r\n                            setUnits(data.UNITS);\r\n                        }\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Units\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function get_all_sections() {\r\n        setRows([]);\r\n        setLoading(true);\r\n        fetch(serverIP + getAllSections)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        if (data.SECTIONS) {\r\n                            setSections(data.SECTIONS);\r\n                        }\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Sections\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function handle_upload_operationClick() {\r\n        if (\r\n            state.operationCode &&\r\n            state.operationDescription &&\r\n            state.unit_id &&\r\n            state.unit_code &&\r\n            state.unit_name &&\r\n            state.section_id\r\n        ) {\r\n            let temp = [];\r\n            temp = [...temp, state];\r\n            upload_operations(temp);\r\n        } else {\r\n            NotificationManager.success(\"Incomplete form\");\r\n        }\r\n    }\r\n    async function upload_operations(data) {\r\n        setLoading(true);\r\n        await fetch(serverIP + uploadOperations, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                orders: data,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Operations have been uploaded\"\r\n                        );\r\n                        setRows(\"\");\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to upload Operations\" +\r\n                                data.Error_Description\r\n                        );\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n                );\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <Dialog\r\n                    data={uploadedDataResponse}\r\n                    status={responseDialogOpen}\r\n                    setDialogOpen={setresponseDialogOpen}\r\n                />\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Add Operations</Typography>\r\n                </div>\r\n                <Paper style={{ padding: \"20px\", marginTop: \"20px\" }}>\r\n                    <Grid container>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.operationCode}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        operationCode: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"operationCode\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Operation Code\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.operationDescription}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        operationDescription: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"operationDescription\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Operation Description\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <Autocomplete\r\n                                //id=\"combo-box-demo\"\r\n                                options={units}\r\n                                getOptionLabel={(option) => option.unit_name}\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={(e, v) => {\r\n                                    if (v) {\r\n                                        setState({\r\n                                            ...state,\r\n                                            unit_id: v.unit_id,\r\n                                            unit_code: v.unit_code,\r\n                                            unit_name: v.unit_name,\r\n                                        });\r\n                                    }\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Unit\"\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <Autocomplete\r\n                                //id=\"combo-box-demo\"\r\n                                options={sections}\r\n                                getOptionLabel={(option) =>\r\n                                    option.section_description\r\n                                }\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={(e, v) => {\r\n                                    if (v) {\r\n                                        setState({\r\n                                            ...state,\r\n                                            section_id: v.section_id,\r\n                                            section_code: v.section_code,\r\n                                            section_description:\r\n                                                v.section_description,\r\n                                        });\r\n                                    }\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Section\"\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                            item\r\n                            lg={12}\r\n                            md={12}\r\n                            sm={12}\r\n                            xs={12}\r\n                            style={{ padding: 5, justifyItems: \"center\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={handle_upload_operationClick}\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                    width: \"100%\",\r\n                                }}\r\n                            >\r\n                                Upload Operations\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                {/* <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTable\r\n                                    title=\"Operations\"\r\n                                    columns={headCells}\r\n                                    data={rows}\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper> */}\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddOperationPage;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n    const [open, setOpen] = React.useState(props.status);\r\n    const [rows, setRows] = React.useState(props.data);\r\n    console.log(props);\r\n    const handleClickOpen = () => {\r\n        props.setDialogOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        props.setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                fullWidth={\"lg\"}\r\n                open={props.status}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Upload Status\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Machine Code</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Machine Type\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.data.map((row) => (\r\n                                    <TableRow key={row.machineCode}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.machineCode}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.machineType}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Error_Description}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Okay\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport MaterialTable from \"material-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { serverIP, uploadMachines } from \"../../../util/Constants\";\r\nimport Dialog from \"../../../components/StatusDialog/machineStatusDialog\";\r\nimport MaterialTableDemo from \"../../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(operationID, operationCode) {\r\n    return { operationID, operationCode };\r\n}\r\nlet operations = [];\r\nconst AddMachineForm = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    const [state, setState] = React.useState({});\r\n    let [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n    let [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n\r\n    React.useEffect(() => {}, []);\r\n\r\n    function handleMachineUploadClick() {\r\n        console.log(state);\r\n\r\n        if (\r\n            state.machineCode &&\r\n            state.machineType &&\r\n            state.model &&\r\n            state.head &&\r\n            state.brand\r\n        ) {\r\n            let temp = [];\r\n            temp = [...temp, state];\r\n            uploadMachinesData(temp);\r\n        } else {\r\n            NotificationManager.error(\"Incomplete form\");\r\n        }\r\n    }\r\n    async function uploadMachinesData(data) {\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        await fetch(serverIP + uploadMachines, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                machines: data,\r\n                unitID: userInfo.unitID,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Machine has been uploaded\"\r\n                        );\r\n                        setRows(\"\");\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to upload Machine\" + data.Error_Description\r\n                        );\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n                );\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <Dialog\r\n                    data={uploadedDataResponse}\r\n                    status={responseDialogOpen}\r\n                    setDialogOpen={setresponseDialogOpen}\r\n                />\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Add Machines</Typography>\r\n                </div>\r\n                <Paper style={{ padding: \"20px\", marginTop: \"20px\" }}>\r\n                    <Grid container>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.machineCode}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        machineCode: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"machineCode\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Machine Code\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.machineType}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        machineType: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"machineType\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Machine Type\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.brand}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        brand: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"brand\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Brand\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.model}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        model: e.target.value,\r\n                                    })\r\n                                }\r\n                                name=\"model\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Model\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                            item\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{ padding: 5 }}\r\n                        >\r\n                            <TextField\r\n                                value={state.head}\r\n                                onChange={(e) =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        head: e.target.value,\r\n                                    })\r\n                                }\r\n                                type=\"number\"\r\n                                name=\"head\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Head\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                            item\r\n                            lg={12}\r\n                            md={12}\r\n                            sm={12}\r\n                            xs={12}\r\n                            style={{ padding: 5, justifyItems: \"center\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={handleMachineUploadClick}\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                    width: \"100%\",\r\n                                }}\r\n                            >\r\n                                Upload Machines\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                {/* <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTable\r\n                                    title=\"Operations\"\r\n                                    columns={headCells}\r\n                                    data={rows}\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper> */}\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMachineForm;\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport {\r\n    serverIP,\r\n    getAllWorkers,\r\n    updateWorkerInfo,\r\n} from \"../../util/Constants\";\r\nimport MaterialTableDemo from \"../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(workerID, workerName, empTypeCode, status) {\r\n    return { workerID, workerName, empTypeCode, status };\r\n}\r\nlet workers = [];\r\nconst Operation = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"workerID\",\r\n            title: \"Worker ID\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"workerName\",\r\n            title: \"Worker Name\",\r\n        },\r\n        {\r\n            field: \"empTypeCode\",\r\n            title: \"EMP Type Code\",\r\n        },\r\n        {\r\n            field: \"status\",\r\n            title: \"Status\",\r\n        },\r\n    ]);\r\n    React.useEffect(() => {\r\n        get_all_workers();\r\n    }, []);\r\n\r\n    function get_all_workers() {\r\n        setRows([]);\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(serverIP + getAllWorkers + \"?unitID=\" + userInfo.unitID)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Workers.map((worker) => {\r\n                            workers.push(\r\n                                createData(\r\n                                    worker.workerID,\r\n                                    worker.workerName,\r\n                                    worker.empTypeCode,\r\n                                    worker.status\r\n                                )\r\n                            );\r\n                        });\r\n                        setRows(workers);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Workers \" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function update_bundle_quantity(itemID, quantity, newData, oldData) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP +\r\n                updateWorkerInfo +\r\n                \"?\" +\r\n                \"workerID=\" +\r\n                oldData.workerID +\r\n                \"&&workerName=\" +\r\n                newData.workerName\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Worker updated successfully\"\r\n                        );\r\n                        let temp = [...rows];\r\n                        temp[temp.indexOf(oldData)] = newData;\r\n                        setRows(temp);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to update Worker\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Workers</Typography>\r\n                </div>\r\n\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTableDemo\r\n                                    headCells={headCells}\r\n                                    Rows={rows}\r\n                                    UpdateQuantityFunction={\r\n                                        update_bundle_quantity\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Operation;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n    const [open, setOpen] = React.useState(props.status);\r\n    const [rows, setRows] = React.useState(props.data);\r\n    console.log(props);\r\n    const handleClickOpen = () => {\r\n        props.setDialogOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        props.setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                fullWidth={\"lg\"}\r\n                open={props.status}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Upload Status\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Worker ID</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Worker Name\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">Status</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.data.map((row) => (\r\n                                    <TableRow key={row.workerID}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.workerID}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.workerName}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.Error_Description}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Okay\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n    serverIP,\r\n    getAllWorkersFromOracle,\r\n    uploadWorkers,\r\n} from \"../../../util/Constants\";\r\nimport MaterialTable from \"material-table\";\r\nimport Dialog from \"../../../components/StatusDialog/workerStatusDialog\";\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(workerID, workerName, unitID, empCodeType,active) {\r\n    return { workerID, workerName, unitID, empCodeType,active};\r\n}\r\n\r\nlet workers = [];\r\nconst AddWorkers = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    let [rows, setRows] = React.useState([]);\r\n    let [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n    let [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"workerID\",\r\n            title: \"Worker Code\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"workerName\",\r\n            title: \"Worker Name\",\r\n        },\r\n        {\r\n            field: \"unitID\",\r\n            title: \"Unit ID\",\r\n        },\r\n        {\r\n            field: \"empCodeType\",\r\n            title: \"EMP Code Type\",\r\n        },\r\n        {\r\n            field: \"active\",\r\n            title: \"Active status\",\r\n        },\r\n    ]);\r\n    React.useEffect(() => {\r\n        get_all_workers();\r\n    }, []);\r\n\r\n    function get_all_workers() {\r\n        setRows([]);\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(\r\n            serverIP + getAllWorkersFromOracle + \"?unitID=\" + userInfo.UsUnitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Workers.map((worker) => {\r\n                            workers.push(\r\n                                createData(\r\n                                    worker.workerID,\r\n                                    worker.workerName,\r\n                                    worker.unitID,\r\n                                    worker.empCodeType,\r\n                                    worker.active, \r\n                                )\r\n                            );\r\n                        });\r\n                        setRows(workers);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Workers\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    function handleWorkerUploadClick() {\r\n        if (rows.length > 0) {\r\n            uploadWorkersData(rows);\r\n        } else {\r\n        }\r\n    }\r\n    async function uploadWorkersData(data) {\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        await fetch(serverIP + uploadWorkers, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                workers: data,\r\n                unitID: userInfo.unitID,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                console.log(data);\r\n                try {\r\n                    if (data.Error_No === \"0\") {\r\n                        var columnsJSON = [];\r\n                        NotificationManager.success(\r\n                            \"Workers have been uploaded\"\r\n                        );\r\n                        setRows(\"\");\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to upload Workers\" + data.Error_Description\r\n                        );\r\n                        setuploadedDataResponse(data.Responses);\r\n                        setresponseDialogOpen(true);\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n                );\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <Dialog\r\n                    data={uploadedDataResponse}\r\n                    status={responseDialogOpen}\r\n                    setDialogOpen={setresponseDialogOpen}\r\n                />\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">Workers</Typography>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid item lg={1} md={1} sm={1} xs={1}></Grid>\r\n                        <Grid item lg={2} md={2} sm={2} xs={2}></Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={9}\r\n                            md={9}\r\n                            sm={9}\r\n                            xs={9}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={handleWorkerUploadClick}\r\n                                style={{\r\n                                    height: \"50px\",\r\n                                }}\r\n                            >\r\n                                Sync Workers\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={2}\r\n                            md={2}\r\n                            sm={2}\r\n                            xs={2}\r\n                            style={{ margin: \"0px 0px 0px 0px\" }}\r\n                        ></Grid>\r\n                    </Grid>\r\n                </Paper>\r\n\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTable\r\n                                    title=\"Workers\"\r\n                                    columns={headCells}\r\n                                    data={rows}\r\n                                />\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddWorkers;\r\n","import React from \"react\";\r\nimport { Paper, TextField, Typography, Grid } from \"@material-ui/core\";\r\nimport { green, pink } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport AddIcon from \"@material-ui/icons/AddAlarm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {\r\n    serverIP,\r\n    getOrdersFromOracleForCutBundleCreation,\r\n    createCutBundleForOrder,\r\n    uploadMachines,\r\n} from \"../../util/Constants\";\r\nimport MaterialTableDemo from \"../../components/UpdateBundleQuantity/BundleQuantityTable\";\r\nimport MaterialTable from \"material-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"../../components/StatusDialog/machineStatusDialog\";\r\nconst animatedComponents = makeAnimated();\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"20px\",\r\n    },\r\n    field: {\r\n        //width: '200px'\r\n    },\r\n    greenAvatar: {\r\n        marginRight: \"10px\",\r\n        color: \"#fff\",\r\n        backgroundColor: green[500],\r\n    },\r\n    root: {\r\n        width: \"100%\",\r\n\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: \"relative\",\r\n        overflow: \"auto\",\r\n        maxHeight: \"850px\",\r\n    },\r\n    columnPaper: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"25% 25% 25% 25%\",\r\n        padding: \"5px\",\r\n        margin: \"10px 5px\",\r\n    },\r\n}));\r\nfunction createData(orderID, orderCode) {\r\n    return { orderID, orderCode };\r\n}\r\n\r\nconst CreateCutBundlePage = (props) => {\r\n    const classes = useStyles();\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [headCells, setHeadCells] = React.useState([\r\n        {\r\n            field: \"orderID\",\r\n            title: \"Order ID\",\r\n            editable: false,\r\n        },\r\n        {\r\n            field: \"orderCode\",\r\n            title: \"Order Code\",\r\n            editable: false,\r\n        },\r\n        {\r\n            title: \"CUT/BUNDLE\",\r\n            field: \"internal_action\",\r\n            editable: false,\r\n            render: (rowData) =>\r\n                rowData && (\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => handleCreateCutBundleClick(rowData)}\r\n                        style={{\r\n                            height: \"35px\",\r\n                        }}\r\n                    >\r\n                        CREATE CUT/BUNDLE\r\n                    </Button>\r\n                ),\r\n        },\r\n    ]);\r\n    let [rows, setRows] = React.useState([]);\r\n    let [responseDialogOpen, setresponseDialogOpen] = React.useState(false);\r\n    let [uploadedDataResponse, setuploadedDataResponse] = React.useState([]);\r\n    React.useEffect(() => {\r\n        getAllOrdersFromCutReport();\r\n    }, []);\r\n\r\n    function getAllOrdersFromCutReport() {\r\n        let orders = [];\r\n        setLoading(true);\r\n        let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(\r\n            serverIP +\r\n                getOrdersFromOracleForCutBundleCreation +\r\n                \"?unitID=\" +\r\n                userInfo.UsUnitID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        data.Orders.map((order) => {\r\n                            var colResult = {};\r\n                            var repeated = orders.filter(function (a) {\r\n                                return a.value == order.orderID;\r\n                            }).length;\r\n                            if (!repeated) {\r\n                                orders.push(\r\n                                    createData(order.orderID, order.orderCode)\r\n                                );\r\n                            }\r\n                        });\r\n                        setRows(orders);\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Orders from Oracle\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    async function handleCreateCutBundleClick(data) {\r\n        setLoading(true);\r\n        fetch(\r\n            serverIP + createCutBundleForOrder + \"?\" + \"orderID=\" + data.orderID\r\n        )\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        // data.Cut_Report.map((item) => {\r\n                        //     cut_report.push(\r\n                        //         createData(\r\n                        //             item.orderID,\r\n                        //             item.cutID,\r\n                        //             item.bundleID,\r\n                        //             item.quantity,\r\n                        //             item.size\r\n                        //         )\r\n                        //     );\r\n                        // });\r\n                        NotificationManager.info(\r\n                            \"Cut/Bundle created successfully\" +\r\n                                data.Error_Description\r\n                        );\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to create Cut/Bundle\" +\r\n                                data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            <LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n                <Dialog\r\n                    data={uploadedDataResponse}\r\n                    status={responseDialogOpen}\r\n                    setDialogOpen={setresponseDialogOpen}\r\n                />\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        padding: \"0px 0px 15px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h5\">CUT/BUNDLE CREATION</Typography>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid item lg={1} md={1} sm={1} xs={1}></Grid>\r\n                        <Grid item lg={2} md={2} sm={2} xs={2}></Grid>\r\n                        <Grid\r\n                            item\r\n                            lg={9}\r\n                            md={9}\r\n                            sm={9}\r\n                            xs={9}\r\n                            style={{\r\n                                padding: \"0px 5px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                            }}\r\n                        ></Grid>\r\n\r\n                        <Grid\r\n                            item\r\n                            lg={2}\r\n                            md={2}\r\n                            sm={2}\r\n                            xs={2}\r\n                            style={{ margin: \"0px 0px 0px 0px\" }}\r\n                        ></Grid>\r\n                    </Grid>\r\n                </Paper>\r\n\r\n                <Paper\r\n                    className={classes.paper}\r\n                    style={{\r\n                        backgroundColor: \"#900C3E\",\r\n                        color: \"#fff\",\r\n                        margin: \"10px 10px 10px 10px\",\r\n                    }}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                            {rows.length > 0 && (\r\n                                <MaterialTable\r\n                                    component={Paper}\r\n                                    style={{ padding: \"15px\" }}\r\n                                    title={\"\"}\r\n                                    columns={headCells}\r\n                                    data={rows}\r\n                                />\r\n                                // <TableContainer component={Paper}>\r\n                                //     <Table\r\n                                //         className={classes.table}\r\n                                //         aria-label=\"simple table\"\r\n                                //     >\r\n                                //         <TableHead>\r\n                                //             <TableRow>\r\n                                //                 <TableCell>\r\n                                //                     ORDER CODE\r\n                                //                 </TableCell>\r\n                                //                 <TableCell align=\"center\">\r\n                                //                     ORDER NAME\r\n                                //                 </TableCell>\r\n                                //                 <TableCell align=\"right\"></TableCell>\r\n                                //             </TableRow>\r\n                                //         </TableHead>\r\n                                //         <TableBody>\r\n                                //             {rows.map((row) => (\r\n                                //                 <TableRow key={row.name}>\r\n                                //                     <TableCell\r\n                                //                         component=\"th\"\r\n                                //                         scope=\"row\"\r\n                                //                     >\r\n                                //                         {row.orderID}\r\n                                //                     </TableCell>\r\n                                //                     <TableCell align=\"center\">\r\n                                //                         {row.orderCode}\r\n                                //                     </TableCell>\r\n                                //                     <TableCell align=\"right\">\r\n                                //                         <Button\r\n                                //                             variant=\"contained\"\r\n                                //                             color=\"primary\"\r\n                                //                             disableElevation\r\n                                //                             onClick={() =>\r\n                                //                                 handleCreateCutBundleClick(\r\n                                //                                     row\r\n                                //                                 )\r\n                                //                             }\r\n                                //                             style={{\r\n                                //                                 height: \"35px\",\r\n                                //                             }}\r\n                                //                         >\r\n                                //                             CREATE CUT/BUNDLE\r\n                                //                         </Button>\r\n                                //                     </TableCell>\r\n                                //                 </TableRow>\r\n                                //             ))}\r\n                                //         </TableBody>\r\n                                //     </Table>\r\n                                // </TableContainer>\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </LoadingOverlay>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateCutBundlePage;\r\n","import React from 'react';\r\nimport { TextField, Button, Grid, Typography, Paper } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { withSnackbar } from 'notistack';\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport {\r\n    serverIP,\r\n    getAllSections,\r\n\tgetLinesForUnit,\r\n\taddUser\r\n} from \"../../util/Constants\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\tfield: {\r\n\t\t//width:'250px'\r\n\t},\r\n\tgrid: {\r\n\t\tpadding: '10px'\r\n\t},\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n}));\r\n\r\nlet usertypes = [{ title: \"WEB PORTAL\", value: \"WEB_PORTAL\" }, { title: \"AUDITOR\", value: \"AUDITOR\" }];\r\n\r\nconst Add = props => {\r\n\tconst [Loading, setLoading] = React.useState(false);\r\n\tconst classes = useStyles();\r\n\tconst [state, setState] = React.useState({ name: '', username: '', password: '', userType: '', line:'',section:'' });\r\n\tconst [lines, setLines] = React.useState([]);\r\n\tconst [sections, setSections] = React.useState([]);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tget_all_lines();\r\n\t\tget_all_sections();\r\n\t}, []);\r\n\tconst handleChange = e => {\r\n\t\tsetState({ ...state, [e.target.name]: e.target.value });\r\n\t};\r\n\tconst  handleSubmit = async () => {\r\n\t\tsetLoading(true);\r\n\t\tconsole.log(state);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\t\tawait fetch(serverIP + addUser, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tusername: state.username,\r\n\t\t\t\tpassword: state.password,\r\n\t\t\t\tsection_id: state.section.section_id,\r\n\t\t\t\tsection_code: state.section.section_code,\r\n\t\t\t\tsection_description: state.section.section_description,\r\n\t\t\t\tline_id: state.line.line_id,\r\n\t\t\t\tline_code: state.line.line_code,\r\n\t\t\t\tline_description: state.line.line_code,\r\n\t\t\t\tunit_id: userInfo.unitID,\r\n\t\t\t\tuser_type: state.userType,\r\n\t\t\t}),\r\n\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === \"0\") {\r\n\t\t\t\t\t\tNotificationManager.success(\r\n\t\t\t\t\t\t\t\"User has been added\"\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to add user\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t};\r\n\tfunction get_all_sections() {\r\n        setLoading(true);\r\n        fetch(serverIP + getAllSections)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        if (data.SECTIONS) {\r\n                            setSections(data.SECTIONS);\r\n                        }\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Sections\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\tfunction get_all_lines() {\r\n        setLoading(true);\r\n\t\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        fetch(serverIP + getLinesForUnit+\"?unitID=\"+userInfo.unitID)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(\"Something went wrong\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                setLoading(false);\r\n                try {\r\n                    if (data.Error_No === 0) {\r\n                        var columnsJSON = [];\r\n                        if (data.LINES) {\r\n                            setLines(data.LINES);\r\n                        }\r\n                    } else {\r\n                        NotificationManager.error(\r\n                            \"Unable to fetch Lines\" + data.Error_Description\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    console.log(\"error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                NotificationManager.error(\r\n                    \"Failed to fetch, connection to server failed\"\r\n                );\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\treturn (\r\n\t\t<LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n\t\t\t<div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tpadding: \"0px 0px 15px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography variant=\"h5\">Create Users</Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={6} md={6} sm={6} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\toptions={usertypes}\r\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.title}\r\n\t\t\t\t\t\t\t\tonChange={(e,option) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif(option){\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, userType: option.title});\r\n\t\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, userType:null});\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) =>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\tvalue={state.userType}\r\n\t\t\t\t\t\t\t\t\t {...params} label=\"User Type\" variant=\"outlined\" fullWidth />}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={6} md={6} sm={6} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\tlabel=\"Username\"\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\t\t\t\tclassName={classes.field}\r\n\t\t\t\t\t\t\t\tvalue={state.username}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t//type=\"number\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={6} md={6} sm={6} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\tclassName={classes.field}\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tvalue={state.password}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t//type=\"number\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={6} md={6} sm={6} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\toptions={lines}\r\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.line_code}\r\n\t\t\t\t\t\t\t\tonChange={(e, option) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(option)\r\n\t\t\t\t\t\t\t\t\t\t\tif (option) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, line: option});\r\n\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, line:null });\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) =>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\tvalue={state.line}\r\n\t\t\t\t\t\t\t\t\t\t {...params} label=\"Line\" variant=\"outlined\" fullWidth />}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={6} md={6} sm={6} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\toptions={sections}\r\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.section_description}\r\n\t\t\t\t\t\t\t\tonChange={(e, option) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(option)\r\n\t\t\t\t\t\t\t\t\t\t\tif (option) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, section: option});\r\n\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetState({ ...state, section:null });\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) =>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\tvalue={state.section}\r\n\t\t\t\t\t\t\t\t\t\t {...params} label=\"Section\" variant=\"outlined\" fullWidth />}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={12} md={12} sm={12} xs={12} className={classes.grid}>\r\n\t\t\t\t\t\t\t<Button variant=\"contained\" fullWidth style={{ backgroundColor: '#900C3E', color: '#fff', height: '50px' }} onClick={handleSubmit}>Add User</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t</div>\r\n\t\t</LoadingOverlay>\r\n\t);\r\n\r\n};\r\n\r\nexport default Add;","import MUIDataTable from \"mui-datatables\";\r\nimport React from \"react\";\r\nconst Datatable = (props) => {\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\tname: \"Order_code\",\r\n\t\t\tlabel: \"Order Code\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Scanning_time\",\r\n\t\t\tlabel: \"Scan Time\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: false,\r\n\t\t\t\tsort: true,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"lineDescription\",\r\n\t\t\tlabel: \"Line Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: false,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"operationDescription\",\r\n\t\t\tlabel: \"Operation Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"sectionDescription\",\r\n\t\t\tlabel: \"Section Description\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: false,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"workerName\",\r\n\t\t\tlabel: \"Worker Name\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"cutID\",\r\n\t\t\tlabel: \"Cut\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"bundleID\",\r\n\t\t\tlabel: \"Bundle Number\",\r\n\t\t\toptions: {\r\n\t\t\t\tfilter: true,\r\n\t\t\t\tfilterType:\"multiselect\",\r\n\t\t\t\tsort: false,\r\n\t\t\t}\r\n\t\t},\r\n\t];\r\n\tconst data = props.Rows;\r\n\tconst options = {\r\n\t\tfilterType: 'dropdown',\r\n\t\tonRowsDelete: (rowsDeleted) => {\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tonRowSelectionChange: (currentRowsSelected,allRowsSelected,rowsSelected) => {\r\n\t\t\tconsole.log(allRowsSelected)\r\n\t\t\tlet selectedRows = [];\r\n\t\t\tif(allRowsSelected.length){\r\n\t\t\t\tallRowsSelected.map((index) => {\r\n\t\t\t\t\tconsole.log(data[index.dataIndex]);\r\n\t\t\t\t\tselectedRows.push(data[index.dataIndex].Bundle_scan_id);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tconsole.log(selectedRows)\r\n\t\t\tprops.setSelectedRows(selectedRows);\r\n\t\t},\r\n\t\ttoolbar: {\r\n\t\t\tsearch: \"Search\",\r\n\t\t\tdownload:false,\r\n\t\t\tdownloadCsv: false,\r\n\t\t\tprint: false,\r\n\t\t\tviewColumns: \"View Columns\",\r\n\t\t\tfilterTable: \"Filter Table\",\r\n\t\t\tdelete:false\r\n\t\t},\r\n\r\n\r\n\t};\r\n\treturn (\r\n\t\t<MUIDataTable\r\n\t\t\ttitle={\"Bundle scannings\"}\r\n\t\t\tdata={data}\r\n\t\t\tcolumns={columns}\r\n\t\t\toptions={options}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default (Datatable);","import React from \"react\";\r\nimport { Paper, Typography, Grid, TextField } from \"@material-ui/core\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport Select from \"react-select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { serverIP, monthNames } from \"../../util/Constants\";\r\nimport DataTable from \"./datatable\";\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\nimport moment from 'moment';\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tpadding: \"20px\",\r\n\t},\r\n\tfield: {\r\n\t\t//width: '200px'\r\n\t},\r\n\tgreenAvatar: {\r\n\t\tmarginRight: \"10px\",\r\n\t\tcolor: \"#fff\",\r\n\t\tbackgroundColor: green[500],\r\n\t},\r\n\troot: {\r\n\t\twidth: \"100%\",\r\n\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tposition: \"relative\",\r\n\t\toverflow: \"auto\",\r\n\t\tmaxHeight: \"850px\",\r\n\t},\r\n\tcolumnPaper: {\r\n\t\tdisplay: \"grid\",\r\n\t\tgridTemplateColumns: \"25% 25% 25% 25%\",\r\n\t\tpadding: \"5px\",\r\n\t\tmargin: \"10px 5px\",\r\n\t},\r\n}));\r\n\r\nlet orders = [];\r\nlet operations = [];\r\nlet selected_operations = [];\r\nlet selected_order = null;\r\n\r\nconst TransferScannings = () => {\r\n\tlet userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\tconst classes = useStyles();\r\n\tconst theme = useTheme();\r\n\tconst [open, setOpen] = React.useState(false);\r\n\tconst [warningDialogOpen, setWarningDialogOpen] = React.useState(false);\r\n\tconst [Loading, setLoading] = React.useState(false);\r\n\tconst [selectedRows, setSelectedRows] = React.useState([]);\r\n\tconst [workers, setWorkers] = React.useState([]);\r\n\tconst [selectedWorker, setSelectedWorker] = React.useState(null);\r\n\tconst [selectedWorkerName, setSelectedWorkerName] = React.useState(null);\r\n\tlet [rows, setRows] = React.useState([]);\r\n\tconst fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\tconst headCells = [\r\n\t\t{\r\n\t\t\tfield: \"Scanning_time\",\r\n\t\t\ttitle: \"Scan Time\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"lineDescription\",\r\n\t\t\ttitle: \"Line Description\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"operationDescription\",\r\n\t\t\ttitle: \"Operation Description\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"sectionDescription\",\r\n\t\t\ttitle: \"Section Description\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"workerName\",\r\n\t\t\ttitle: \"Worker Name\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"cutID\",\r\n\t\t\ttitle: \"Cut\",\r\n\t\t\tdisablePadding: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"bundleID\",\r\n\t\t\ttitle: \"Bundle\",\r\n\t\t\tdisablePadding: false,\r\n\t\t}\r\n\t];\r\n\tReact.useEffect(() => {\r\n\t\tget_workers();\r\n\t}, []);\r\n\tconst handleDisagreeDialogClick = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetWarningDialogOpen(false);\r\n\t};\r\n\tconst handleAgreeDialogClick = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetWarningDialogOpen(false);\r\n\t\tif (selectedWorker != null) {\r\n\t\t\ttransferScanningRequest(\r\n\t\t\t\tselectedWorker,\r\n\t\t\t\tselectedRows,\r\n\t\t\t);\r\n\t\t\tconsole.log(selectedWorker);\r\n\t\t\tconsole.log(selectedRows);\r\n\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Select worker\");\r\n\t\t}\r\n\t};\r\n\tconst handleDeleteScanningsButtonClick = (selectedWorker, selectedRows) => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\tconst transferScanningRequest = async () => {\r\n\t\tsetLoading(true);\r\n\t\tawait fetch(\r\n\t\t\tserverIP +\r\n\t\t\t\"UpdateWorkerInBundleScanning/updateWorkerInBundleScannings.php?scan_ids=\" +\r\n\t\t\t\"(\" + selectedRows.toString()\r\n\t\t\t+ `)&&worker_id=` + selectedWorker.value\r\n\t\t\t+ `&&worker_code=` + selectedWorker.code\r\n\t\t\t+ `&&worker_name=` + selectedWorker.label,\r\n\t\t\t{\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No == \"0\") {\r\n\t\t\t\t\t\tvar columnsJSON = [];\r\n\t\t\t\t\t\tsetRows([]);\r\n\t\t\t\t\t\tNotificationManager.success(\r\n\t\t\t\t\t\t\t\"Scannings transferred successfully\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to transfer Scannings\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, check your server or server file, Unexpected response from server file or the application is unable to reach server file\"\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t};\r\n\tfunction get_operations_for_orders(order) {\r\n\t\toperations = [];\r\n\t\tsetLoading(true);\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\t\"/DeleteScannings/getCutsForOrderFromProgressComplete.php?\" +\r\n\t\t\t\"orderID=\" +\r\n\t\t\torder + \"&&unitID=\" + userInfo.unitID\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tdata.Operations.map((operation) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tcolResult[\"value\"] = operation.operationID;\r\n\t\t\t\t\t\t\tcolResult[\"label\"] = operation.operationID;\r\n\t\t\t\t\t\t\toperations.push(colResult);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch Operations\" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tfunction get_scannings_for_date_range(startDate, endDate) {\r\n\t\tsetLoading(true);\r\n\t\tfetch(\r\n\t\t\tserverIP +\r\n\t\t\t\"/UpdateWorkerInBundleScanning/getBundleScannings.php?\" +\r\n\t\t\t\"startDate=\" +\r\n\t\t\tstartDate +\r\n\t\t\t\"&&endDate=\" +\r\n\t\t\tendDate +\r\n\t\t\t\"&&unitID=\" + userInfo.unitID\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tsetRows(data.Scannings);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch scannings \" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\tfunction get_workers() {\r\n\t\tsetLoading(true);\r\n\t\tfetch(serverIP + \"/Workers/getAllWorkers.php?unitID=\" + userInfo.unitID)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Something went wrong\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (data.Error_No === 0) {\r\n\t\t\t\t\t\tlet workers = [];\r\n\t\t\t\t\t\tdata.Workers.map((worker) => {\r\n\t\t\t\t\t\t\tvar colResult = {};\r\n\t\t\t\t\t\t\tvar repeated = workers.filter(function(a) {\r\n\t\t\t\t\t\t\t\treturn a.value === worker.workerID;\r\n\t\t\t\t\t\t\t}).length;\r\n\t\t\t\t\t\t\tif (!repeated) {\r\n\t\t\t\t\t\t\t\tcolResult[\"value\"] = worker.workerID;\r\n\t\t\t\t\t\t\t\tcolResult[\"code\"] = worker.workerCode;\r\n\t\t\t\t\t\t\t\tcolResult[\"label\"] = worker.workerName;\r\n\t\t\t\t\t\t\t\tworkers.push(colResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetWorkers(workers);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\t\t\"Unable to fetch workers \" +\r\n\t\t\t\t\t\t\tdata.Error_Description\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tNotificationManager.error(\r\n\t\t\t\t\t\"Failed to fetch, connection to server failed\"\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<LoadingOverlay active={Loading} spinner text={\"Fetching data\"}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tpadding: \"0px 0px 15px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography variant=\"h5\">Bundle Scannings</Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tDate Range\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={4} md={4} sm={4} xs={4}>\r\n\t\t\t\t\t\t\t<DateRangePicker\r\n\t\t\t\t\t\t\t\tonApply={(event, picker) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(moment(picker.startDate._d).format('DD-MMM-YYYY'));\r\n\t\t\t\t\t\t\t\t\tconsole.log(moment(picker.endDate._d).format('DD-MMM-YYYY'));\r\n\t\t\t\t\t\t\t\t\tget_scannings_for_date_range(moment(picker.startDate._d).format('DD-MMM-YYYY'), moment(picker.endDate._d).format('DD-MMM-YYYY'));\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tinitialSettings={{ startDate: moment(), endDate: moment() }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" />\r\n\t\t\t\t\t\t\t</DateRangePicker>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={3} md={3} sm={3} xs={3}>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item lg={3} md={3} sm={3} xs={3}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: \"0px 5px\",\r\n\t\t\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\t\t\tjustifyContent: \"flex-end\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{selectedRows.length > 0 && (\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={handleDeleteScanningsButtonClick}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tTransfer\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\tPaperProps={{ style: { overflowY: 'visible' } }}\r\n\t\t\t\t\tfullScreen={fullScreen}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\taria-labelledby=\"form-dialog-title\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">\r\n\t\t\t\t\t\t{\"Select Worker\"}\r\n\t\t\t\t\t</DialogTitle>\r\n\t\t\t\t\t<DialogContent style={{ overflowY: 'visible', width: \"600px\" }}>\r\n\t\t\t\t\t\t<Grid container display=\"flex\" style={{ justifyContent: \"space-around\" }} >\r\n\t\t\t\t\t\t\t<Grid item lg={1} md={1} sm={1} xs={1}>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"10px\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tvariant=\"subtitle2\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tWORKER\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item lg={5} md={5} sm={5} xs={5}>\r\n\t\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\t\tPaperProps={{ style: { overflowX: 'visible' } }}\r\n\t\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\r\n\t\t\t\t\t\t\t\t\toptions={workers}\r\n\t\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.label}\r\n\t\t\t\t\t\t\t\t\tonChange={(e, option) => {\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('option ===================================================> ', option);\r\n\t\t\t\t\t\t\t\t\t\tif (option) {\r\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedWorker(option);\r\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedWorkerName(option.label);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedWorker(null);\r\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedWorkerName(\"Not Selected\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\trenderInput={(params) => <TextField style={{ width: \"100%\" }} {...params} variant=\"outlined\" />}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\tonClick={() => setOpen(false)}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDisagree\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tonClick={() => setWarningDialogOpen(true)}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAgree\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</Dialog>\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\tPaperProps={{ style: { overflowY: 'visible' } }}\r\n\t\t\t\t\tfullScreen={fullScreen}\r\n\t\t\t\t\topen={warningDialogOpen}\r\n\t\t\t\t\taria-labelledby=\"form-dialog-title\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">\r\n\t\t\t\t\t\t{\"Are you sure you want to transfer \" + selectedRows.length + \"bundles to \" + selectedWorkerName + \" ?\"}\r\n\t\t\t\t\t</DialogTitle>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\tonClick={handleDisagreeDialogClick}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDisagree\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tonClick={handleAgreeDialogClick}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAgree\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</Dialog>\r\n\t\t\t\t<Paper\r\n\t\t\t\t\tclassName={classes.paper}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: \"#900C3E\",\r\n\t\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\t\tmargin: \"10px 10px 10px 10px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item lg={12} md={12} sm={12} xs={12}>\r\n\t\t\t\t\t\t\t{rows.length > 0 && (\r\n\t\t\t\t\t\t\t\t<DataTable\r\n\t\t\t\t\t\t\t\t\theadCells={headCells}\r\n\t\t\t\t\t\t\t\t\tRows={rows}\r\n\t\t\t\t\t\t\t\t\tselectedRows={selectedRows}\r\n\t\t\t\t\t\t\t\t\tsetSelectedRows={setSelectedRows}\r\n\t\t\t\t\t\t\t\t\thandleDeleteScanningsButtonClick={handleDeleteScanningsButtonClick}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\t\t\t</LoadingOverlay>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default TransferScannings;\r\n","import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Dashboard from \"../Dashboard\";\r\nimport OrderTransfer from \"../OrderTransfer\";\r\nimport UpdateQuantity from \"../CutReport/UpdateQuantity/UpdateQuantity\";\r\nimport DeleteScannings from \"../DeleteScannings/DeleteScannings\";\r\nimport RateAdjustment from \"../StyleBulletin/RateAdjustment/RateAdjustment\";\r\nimport UploadStyleBulletin from \"../StyleBulletin/UploadStyleBulletin/UploadStyleBulletin\";\r\nimport UploadCutReport from \"../CutReport/Upload Cutreport/UploadCutReport\";\r\n\r\nimport Machine from \"../Machine/Machine\";\r\nimport Operation from \"../Operation/Operation\";\r\nimport AddOperation from \"../Operation/Add Operations/AddOperations\";\r\nimport AddMachineForm from \"../Machine/Add Machines/AddMachineForm\";\r\nimport Worker from \"../Worker/Worker\";\r\nimport Addworker from \"../Worker/Add Workers/AddWorkers\";\r\nimport CutBundleCreation from \"../CutBundleCreation/CutBundleCreation\";\r\nimport UserAccounts from \"../../components/UserAccounts/Add\"\r\nimport TransferScannigns from \"../../components/TransferScannings\"\r\n\r\nconst Home = (props) => {\r\n\tconst [selected, setSelected] = React.useState(1);\r\n\tconsole.log(props);\r\n\treturn (\r\n\t\t<Layout selected={selected} setSelected={setSelected}>\r\n\t\t\t{selected === 1 ? (\r\n\t\t\t\t<Dashboard />\r\n\t\t\t) : selected === 2 ? (\r\n\t\t\t\t<OrderTransfer />\r\n\t\t\t) : selected === 4 ? (\r\n\t\t\t\t<UpdateQuantity />\r\n\t\t\t) : selected === 3 ? (\r\n\t\t\t\t<DeleteScannings />\r\n\t\t\t) : selected === 5 ? (\r\n\t\t\t\t<RateAdjustment />\r\n\t\t\t) : selected === 6 ? (\r\n\t\t\t\t<UploadStyleBulletin />\r\n\t\t\t) : selected === 7 ? (\r\n\t\t\t\t<UploadCutReport />\r\n\t\t\t) : selected === 8 ? (\r\n\t\t\t\t<Machine />\r\n\t\t\t) : selected === 9 ? (\r\n\t\t\t\t<Operation />\r\n\t\t\t) : selected === 10 ? (\r\n\t\t\t\t<Worker />\r\n\t\t\t) : selected === 11 ? (\r\n\t\t\t\t<AddOperation />\r\n\t\t\t) : selected === 12 ? (\r\n\t\t\t\t<AddMachineForm />\r\n\t\t\t) : selected === 13 ? (\r\n\t\t\t\t<Addworker />\r\n\t\t\t) : selected === 14 ? (\r\n\t\t\t\t<CutBundleCreation />\r\n\t\t\t): selected === 15 ? (\r\n\t\t\t\t<UserAccounts />\r\n\t\t\t):  selected === 16 ? (\r\n\t\t\t\t<TransferScannigns />\r\n\t\t\t) : (\r\n\t\t\t\t<div style={{ padding: \"20px\" }}>No option selected.</div>\r\n\t\t\t)}\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","//export const serverIP = \"http://us2levisqms/US2_wage_portal/\";\r\n//export const serverIP = \"http://us2levisqms/US2_SPTS/\";\r\nexport const serverIP = \"http://us2levisqms/US2_SPTS/\";\r\n//export const serverIP = \"http://192.168.88.214/US2_SPTS/\";\r\nexport const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n];\r\n\r\nexport const login = \"/userLogin.php\";\r\n\r\n// For View Cutreport\r\nexport const forViewgetOrdersFromCutReport =\r\n    \"CutReport/View CutReport/getOrdersFromCutreport.php\";\r\nexport const forViewgetCutsForOrder =\r\n    \"CutReport/View CutReport/getCutsForOrderFromCutreport.php\";\r\nexport const forViewgetBundlesForOrderCut =\r\n    \"CutReport/View CutReport/getBundlesForOrder,CutFromCutreport.php\";\r\n\r\nexport const updateBundle =\r\n    \"CutReport/View CutReport/updateQuantityForItemID.php\";\r\n\r\n//For Upload Cutreport\r\nexport const getOrdersFromOracle =\r\n    \"CutReport/Upload CutReport/getOrdersFromOracle.php\";\r\nexport const getCutReportFromOracleForOrder =\r\n    \"CutReport/Upload CutReport/fetchCutReportForOrderFromOracle.php\";\r\nexport const uploadCutReport = \"CutReport/Upload CutReport/uploadCutReport.php\";\r\n\r\n// Upload Operations\r\nexport const getAllOperationsFromOracle =\r\n    \"Operations/Upload Operations/getAllOperations.php\";\r\nexport const uploadOperations =\r\n    \"Operations/Upload Operations/UploadOperations.php\";\r\n\r\n// Operations\r\nexport const getAllOperations = \"Operations/getAllOperations.php\";\r\nexport const getAllOperationsFromSql = \"Operations/getAllOperationsFromSQL.php\";\r\nexport const updateOperationInfo = \"Operations/updateOperationInfo.php\";\r\n\r\n// Upload Machines\r\nexport const getAllMachinesFromOracle =\r\n    \"Machines/Upload Machines/getAllMachinesFromOracle.php\";\r\nexport const uploadMachines = \"Machines/Upload Machines/UploadMachines.php\";\r\n//Machines\r\nexport const getAllMachines = \"Machines/getAllMachines.php\";\r\nexport const updateMachineInfo = \"Machines/updateMachineInfo.php\";\r\n\r\n//Upload workers\r\nexport const getAllWorkersFromOracle =\r\n    \"Workers/uploadWorkers/getAllWorkersFromOracle.php\";\r\nexport const uploadWorkers = \"Workers/uploadWorkers/UploadWorkers.php\";\r\n\r\nexport const getAllUnits = \"getAllUnits.php\";\r\nexport const getAllSections = \"getAllSections.php\";\r\n\r\n//Workers\r\nexport const getAllWorkers = \"Workers/getAllWorkers.php\";\r\nexport const updateWorkerInfo = \"Workers/updateWorkerInfo.php\";\r\n\r\n//For Upload Style Bulletin\r\nexport const getOrdersForStyleBulletinFromOracle =\r\n    \"StyleBulletin/StyleBulletinUpload/getOrdersFromOracle.php\";\r\n\r\nexport const getStyleBulletin =\r\n    \"StyleBulletin/StyleBulletinUpload/fetchStyleBulletinForOrderFromOracle.php\";\r\nexport const uploadStyleBulletin =\r\n    \"StyleBulletin/StyleBulletinUpload/uploadStyleBuletin.php\";\r\n\r\n// For Cut Bundle Creation\r\nexport const getOrdersFromOracleForCutBundleCreation =\r\n    \"CutBundleCreation/getOrdersForBundleCreation.php\";\r\nexport const createCutBundleForOrder =\r\n    \"CutBundleCreation/createCutBundleForOrder.php\";\r\n\t// Lines\r\nexport const getLinesForUnit =\r\n\"getAllLinesForUnit.php\";\r\n\r\nexport const addUser =\r\n\"Users/createUser.php\";\r\n","module.exports = {\r\n    time_interval: 30,\r\n    drawer_options: [\r\n        {\r\n            option: \"SKU\",\r\n            link: \"/home/sku\",\r\n        },\r\n        {\r\n            option: \"Machine\",\r\n            link: \"/home/machine\",\r\n        },\r\n        {\r\n            option: \"Dashboard\",\r\n            link: \"/home/dashboard\",\r\n        },\r\n        {\r\n            option: \"Machine Efficiency\",\r\n            link: \"/home/efficiency\",\r\n        },\r\n    ],\r\n    drawerWidth: 280,\r\n    // end_point:'http://192.168.88.237:4001/'\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/machines.bd8b814b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/usaparel_white.b15057ed.png\";","module.exports = __webpack_public_path__ + \"static/media/WiMetrix4.e91bc317.png\";"],"sourceRoot":""}