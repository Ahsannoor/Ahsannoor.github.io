{"version":3,"sources":["util/asyncComponent.js","router.js","util/validators.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","state","component","then","cmp","setState","default","C","this","props","Component","PrivateRoute","rest","isAllowed","render","localStorage","getItem","to","pathname","from","location","PublicRoutes","history","isLoggedIn","role","LocalStorage","require","userInfo","JSON","parse","console","log","exact","path","checked","value","options","message","validate","validators","theme","createMuiTheme","palette","primary","main","secondary","App","utils","MomentUtils","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAqBeA,EAnBQ,SAAAC,GAAe,kNAElCC,MAAQ,CACNC,UAAW,MAHqB,mFAMb,IAAD,OAClBF,IAAkBG,MAAK,SAAAC,GACrB,EAAKC,SAAS,CAAEH,UAAWE,EAAIE,eARD,+BAahC,IAAMC,EAAIC,KAAKP,MAAMC,UAErB,OAAOK,EAAI,kBAACA,EAAMC,KAAKC,OAAY,SAfH,GACtBC,cCYVC,EAAe,SAAC,GAAD,IAAcD,EAAd,EAAGR,UAAoCU,GAAvC,EAAyBC,UAAzB,iDACjB,kBAAC,IAAD,iBACQD,EADR,CAEIE,OAAQ,SAACL,GAAD,OACJM,aAAY,YAAkBA,aAAaC,QAAQ,YAC/C,kBAACN,EAAcD,GAEf,kBAAC,IAAD,CACIQ,GAAI,CACAC,SAAU,IACVjB,MAAO,CAAEkB,KAAMV,EAAMW,kBA+F9BC,EAvEM,SAAC,GAAkC,EAAhCC,QAAgC,EAAvBC,WAAuB,EAAXC,KACzC,GAA4B,qBAAjBT,cAAiD,OAAjBA,aAAuB,CAC9D,IAAIU,EAAeC,EAAQ,KAAqBD,aAChDV,aAAe,IAAIU,EAAa,aAEpC,IAAIE,EAAWC,KAAKC,MAAMd,aAAaC,QAAQ,aAE/C,OADAc,QAAQC,IAAIJ,GAGR,6BACI,kBAAC,IAAD,CACIK,OAAK,EACLC,KAAM,IACN/B,UAAWH,GAAe,kBAAM,0DAEpC,kBAAC,IAAD,CACIiC,OAAK,EACLC,KAAM,UACN/B,UAAWH,GAAe,kBAAM,0DAEpC,kBAAC,EAAD,CACIiC,OAAK,EACLC,KAAM,QACN/B,UAAWH,GAAe,kBAAM,mE,SClE/B,GACbmC,QAPY,SAACC,EAAOC,GACpB,IAAc,IAAVD,EACF,OAAOC,EAAQC,SAAW,oB,oECYhCC,IAASC,WAAT,eACOD,IAASC,WADhB,GAEOA,GAEP,IAAMC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cA0BHE,MArBf,WACI,OACI,kBAAC,IAAD,CAAyBC,MAAOC,KAC5B,kBAACC,EAAA,EAAD,CAAeT,MAAOA,GAClB,kBAAC,mBAAD,CACIU,SAAU,EACVC,aAAc,CACVC,SAAU,MACVC,WAAY,UAGhB,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJ,kBAAC,wBAAD,UC/BAC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCXNC,IAAS5C,OAAO,kBAAC,EAAD,MAAS6C,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.8f2609f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst asyncComponent = importComponent =>\r\n  class extends Component {\r\n    state = {\r\n      component: null\r\n    };\r\n\r\n    componentDidMount() {\r\n      importComponent().then(cmp => {\r\n        this.setState({ component: cmp.default });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component;\r\n      // console.log('importComponent in asyncComponenet',importComponent)\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  };\r\n\r\nexport default asyncComponent;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\n// import { connect } from 'react-redux';\r\nimport asyncComponent from \"./util/asyncComponent\";\r\n// import Signup from './containers/pages/Signup/Signup'\r\n// import AdminPortal from './containers/AdminPortal/AdminPortal'\r\n// import AdminAddUniversity from './containers/pages/AdminAddUniversity/AdminAddUniversity'\r\n// // import App from './containers/App/App';\r\n// // import AppClinic from './containers/AppClinic/App';\r\n// // import AppAdmin from './containers/AppAdmin/App';\r\n// // import asyncComponent from './util/AsyncComponent';\r\n// // import Auth0 from './helpers/auth0';\r\n// // import { BrowserRouter } from 'react-router-dom'\r\n\r\nconst PrivateRoute = ({ component: Component, isAllowed, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={(props) =>\r\n            localStorage[\"isLoggedIn\"] && localStorage.getItem(\"userInfo\") ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect\r\n                    to={{\r\n                        pathname: \"/\",\r\n                        state: { from: props.location },\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    />\r\n);\r\n// const AdminRoute = ({ component: Component,isLoggedIn, role, ...rest }) => (\r\n//   <Route\r\n//     {...rest}\r\n//     render={props =>\r\n//       role === 'admin' && isLoggedIn === true ? (\r\n//         <Component {...props} />\r\n//       ) : (\r\n//           <Redirect\r\n//             to={{\r\n//               pathname: '/',\r\n//               state: { from: props.location },\r\n//             }}\r\n//           />\r\n//         )\r\n//     }\r\n//   />\r\n// );\r\nconst PublicRoutes = ({ history, isLoggedIn, role }) => {\r\n    if (typeof localStorage === \"undefined\" || localStorage === null) {\r\n        var LocalStorage = require(\"node-localstorage\").LocalStorage;\r\n        localStorage = new LocalStorage(\"./scratch\");\r\n    }\r\n    let userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    console.log(userInfo);\r\n    return (\r\n        // <ConnectedRouter history={history}>\r\n        <div>\r\n            <Route\r\n                exact\r\n                path={\"/\"}\r\n                component={asyncComponent(() => import(\"./pages/Login\"))}\r\n            />\r\n            <Route\r\n                exact\r\n                path={\"/signup\"}\r\n                component={asyncComponent(() => import(\"./pages/Signup\"))}\r\n            />\r\n            <PrivateRoute\r\n                exact\r\n                path={\"/home\"}\r\n                component={asyncComponent(() => import(\"./pages/Home\"))}\r\n            />\r\n\r\n            {/* <PrivateRoute\r\n          exact\r\n          path={'/home/machine'}\r\n          component={asyncComponent(() =>\r\n            import('./pages/Machine')\r\n          )}\r\n          isAllowed={true}\r\n        />\r\n        <PrivateRoute\r\n          exact\r\n          path={'/home/dashboard'}\r\n          component={asyncComponent(() =>\r\n            import('./pages/Dashboard')\r\n          )}\r\n          isAllowed={true}\r\n        />\r\n        <PrivateRoute\r\n          exact\r\n          path={'/home/efficiency'}\r\n          component={asyncComponent(() =>\r\n            import('./pages/Efficiency')\r\n          )}\r\n          isAllowed={true}\r\n        /> */}\r\n            {/* <AdminRoute\r\n          path=\"/admin-portal\"\r\n          component={AdminPortal}\r\n          isLoggedIn={isLoggedIn}\r\n          role={role}\r\n        />\r\n        <AdminRoute\r\n          path='/admin-add-new-university'\r\n          component={AdminAddUniversity}\r\n          isLoggedIn={isLoggedIn}\r\n          role={role}\r\n        /> */}\r\n        </div>\r\n        // </ConnectedRouter>\r\n    );\r\n};\r\n\r\n// export default connect(state => ({\r\n//   isLoggedIn: state.Auth.isLoggedIn,\r\n//   role: state.Auth.user?state.Auth.user.role:null,\r\n// }))(PublicRoutes);\r\nexport default PublicRoutes;\r\n","const checked = (value, options) => {\r\n    if (value !== true) {\r\n      return options.message || 'must be checked';\r\n    }\r\n  };\r\n  \r\n  export default {\r\n    checked\r\n  };\r\n  ","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Routes from \"./router\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport validators from \"./util/validators\";\r\nimport validate from \"validate.js\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\n\r\nvalidate.validators = {\r\n    ...validate.validators,\r\n    ...validators,\r\n};\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#900C3E\",\r\n        },\r\n        secondary: {\r\n            main: \"#C70E39\",\r\n        },\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    return (\r\n        <MuiPickersUtilsProvider utils={MomentUtils}>\r\n            <ThemeProvider theme={theme}>\r\n                <SnackbarProvider\r\n                    maxSnack={3}\r\n                    anchorOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"right\",\r\n                    }}\r\n                >\r\n                    <BrowserRouter>\r\n                        <Routes />\r\n                    </BrowserRouter>\r\n                    <NotificationContainer />\r\n                </SnackbarProvider>\r\n            </ThemeProvider>\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n//import 'react-notifications/lib/notifications.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}